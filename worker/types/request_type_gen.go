package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	"github.com/CovenantSQL/HashStablePack/msgp"
)

// MarshalHash marshals for hash
func (z *QueryKey) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83, 0x83)
	if oTemp, err := z.NodeID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x83)
	o = msgp.AppendUint64(o, z.ConnectionID)
	o = append(o, 0x83)
	o = msgp.AppendUint64(o, z.SeqNo)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryKey) Msgsize() (s int) {
	s = 1 + 7 + z.NodeID.Msgsize() + 13 + msgp.Uint64Size + 6 + msgp.Uint64Size
	return
}

// MarshalHash marshals for hash
func (z QueryType) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueryType) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// MarshalHash marshals for hash
func (z *RequestHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	o = append(o, 0x88, 0x88)
	o = msgp.AppendInt32(o, int32(z.QueryType))
	o = append(o, 0x88)
	if oTemp, err := z.NodeID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x88)
	if oTemp, err := z.DatabaseID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x88)
	o = msgp.AppendUint64(o, z.ConnectionID)
	o = append(o, 0x88)
	o = msgp.AppendUint64(o, z.SeqNo)
	o = append(o, 0x88)
	o = msgp.AppendTime(o, z.Timestamp)
	o = append(o, 0x88)
	o = msgp.AppendUint64(o, z.BatchCount)
	o = append(o, 0x88)
	if oTemp, err := z.QueriesHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestHeader) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int32Size + 7 + z.NodeID.Msgsize() + 11 + z.DatabaseID.Msgsize() + 13 + msgp.Uint64Size + 6 + msgp.Uint64Size + 10 + msgp.TimeSize + 11 + msgp.Uint64Size + 12 + z.QueriesHash.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z *SignedRequestHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84, 0x84)
	if oTemp, err := z.RequestHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if oTemp, err := z.HeaderHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if z.Signee == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signee.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x84)
	if z.Signature == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signature.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedRequestHeader) Msgsize() (s int) {
	s = 1 + 14 + z.RequestHeader.Msgsize() + 11 + z.HeaderHash.Msgsize() + 7
	if z.Signee == nil {
		s += msgp.NilSize
	} else {
		s += z.Signee.Msgsize()
	}
	s += 10
	if z.Signature == nil {
		s += msgp.NilSize
	} else {
		s += z.Signature.Msgsize()
	}
	return
}
