// Code generated by codecgen - DO NOT EDIT.

package types

import (
	pkg4_elliptic "crypto/elliptic"
	pkg8_sql "database/sql"
	"errors"
	pkg5_big "math/big"
	"runtime"
	"strconv"
	"time"

	pkg3_asymmetric "github.com/CovenantSQL/CovenantSQL/crypto/asymmetric"
	pkg2_hash "github.com/CovenantSQL/CovenantSQL/crypto/hash"
	pkg6_kayak "github.com/CovenantSQL/CovenantSQL/kayak"
	pkg1_proto "github.com/CovenantSQL/CovenantSQL/proto"
	pkg7_types "github.com/CovenantSQL/CovenantSQL/sqlchain/types"
	codec1978 "github.com/ugorji/go/codec"
)

const (
	// ----- content types ----
	codecSelferCcUTF81464 = 1
	codecSelferCcRAW1464  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1464  = 10
	codecSelferValueTypeMap1464    = 9
	codecSelferValueTypeString1464 = 6
	codecSelferValueTypeInt1464    = 2
	codecSelferValueTypeUint1464   = 3
	codecSelferValueTypeFloat1464  = 4
	codecSelferBitsize1464         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1464 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1464 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_elliptic.Curve
		var v1 pkg8_sql.NamedArg
		var v2 pkg3_asymmetric.PublicKey
		var v3 pkg2_hash.Hash
		var v4 pkg6_kayak.Peers
		var v5 pkg1_proto.NodeID
		var v6 pkg7_types.Block
		var v7 pkg5_big.Int
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *AckHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Response
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `r`)
				r.WriteMapElemValue()
				yy6 := &x.Response
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf9 := &x.NodeID
				yysf9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `i`)
				r.WriteMapElemValue()
				yysf10 := &x.NodeID
				yysf10.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AckHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *AckHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.Response = SignedResponseHeader{}
			} else {
				x.Response.CodecDecodeSelf(d)
			}
		case "i":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AckHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Response = SignedResponseHeader{}
	} else {
		x.Response.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedAckHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Response
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `r`)
				r.WriteMapElemValue()
				yy6 := &x.Response
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf9 := &x.NodeID
				yysf9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `i`)
				r.WriteMapElemValue()
				yysf10 := &x.NodeID
				yysf10.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.HeaderHash
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `hh`)
				r.WriteMapElemValue()
				yy17 := &x.HeaderHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy17), e)
				}
			}
			var yyn19 bool
			if x.Signee == nil {
				yyn19 = true
				goto LABEL19
			}
		LABEL19:
			if yyr2 || yy2arr2 {
				if yyn19 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt20 := z.Extension(z.I2Rtid(x.Signee)); yyxt20 != nil {
							z.EncExtension(x.Signee, yyxt20)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if yyn19 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt21 := z.Extension(z.I2Rtid(x.Signee)); yyxt21 != nil {
							z.EncExtension(x.Signee, yyxt21)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn22 bool
			if x.Signature == nil {
				yyn22 = true
				goto LABEL22
			}
		LABEL22:
			if yyr2 || yy2arr2 {
				if yyn22 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt23 := z.Extension(z.I2Rtid(x.Signature)); yyxt23 != nil {
							z.EncExtension(x.Signature, yyxt23)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `s`)
				r.WriteMapElemValue()
				if yyn22 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
							z.EncExtension(x.Signature, yyxt24)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedAckHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedAckHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.AckHeader.Response = SignedResponseHeader{}
			} else {
				x.Response.CodecDecodeSelf(d)
			}
		case "i":
			if r.TryDecodeAsNil() {
				x.AckHeader.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.AckHeader.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "hh":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt9 != nil {
					z.DecExtension(x.HeaderHash, yyxt9)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Signee)); yyxt11 != nil {
					z.DecExtension(x.Signee, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.Signature)); yyxt13 != nil {
					z.DecExtension(x.Signature, yyxt13)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedAckHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AckHeader.Response = SignedResponseHeader{}
	} else {
		x.Response.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AckHeader.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AckHeader.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt20 != nil {
			z.DecExtension(x.HeaderHash, yyxt20)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.Signee)); yyxt22 != nil {
			z.DecExtension(x.Signee, yyxt22)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
			z.DecExtension(x.Signature, yyxt24)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Ack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.Header
				yy16.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `h`)
				r.WriteMapElemValue()
				yy18 := &x.Header
				yy18.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Ack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *Ack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "h":
			if r.TryDecodeAsNil() {
				x.Header = SignedAckHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Ack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.TTL)); yyxt14 != nil {
			z.DecExtension(x.TTL, yyxt14)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Expire)); yyxt16 != nil {
			z.DecExtension(x.Expire, yyxt16)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedAckHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AckResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(0)
			} else {
				r.WriteMapStart(0)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AckResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *AckResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AckResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	r.ReadArrayEnd()
}

func (x *InitService) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *InitService) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *InitService) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *InitService) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt13 := z.Extension(z.I2Rtid(x.TTL)); yyxt13 != nil {
			z.DecExtension(x.TTL, yyxt13)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.Expire)); yyxt15 != nil {
			z.DecExtension(x.Expire, yyxt15)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Node))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Node`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Node))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Space))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Space`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Space))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Memory))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Memory`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Memory))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.LoadAvgPerCPU))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `LoadAvgPerCPU`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.LoadAvgPerCPU))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.EncryptionKey))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `EncryptionKey`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.EncryptionKey))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ResourceMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *ResourceMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Node":
			if r.TryDecodeAsNil() {
				x.Node = 0
			} else {
				x.Node = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "Space":
			if r.TryDecodeAsNil() {
				x.Space = 0
			} else {
				x.Space = (uint64)(r.DecodeUint64())
			}
		case "Memory":
			if r.TryDecodeAsNil() {
				x.Memory = 0
			} else {
				x.Memory = (uint64)(r.DecodeUint64())
			}
		case "LoadAvgPerCPU":
			if r.TryDecodeAsNil() {
				x.LoadAvgPerCPU = 0
			} else {
				x.LoadAvgPerCPU = (uint64)(r.DecodeUint64())
			}
		case "EncryptionKey":
			if r.TryDecodeAsNil() {
				x.EncryptionKey = ""
			} else {
				x.EncryptionKey = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ResourceMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Node = 0
	} else {
		x.Node = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Space = 0
	} else {
		x.Space = (uint64)(r.DecodeUint64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Memory = 0
	} else {
		x.Memory = (uint64)(r.DecodeUint64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LoadAvgPerCPU = 0
	} else {
		x.LoadAvgPerCPU = (uint64)(r.DecodeUint64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.EncryptionKey = ""
	} else {
		x.EncryptionKey = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceInstance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.DatabaseID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `DatabaseID`)
				r.WriteMapElemValue()
				yysf5 := &x.DatabaseID
				yysf5.CodecEncodeSelf(e)
			}
			var yyn6 bool
			if x.Peers == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt7 := z.Extension(z.I2Rtid(x.Peers)); yyxt7 != nil {
							z.EncExtension(x.Peers, yyxt7)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Peers`)
				r.WriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt8 := z.Extension(z.I2Rtid(x.Peers)); yyxt8 != nil {
							z.EncExtension(x.Peers, yyxt8)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.ResourceMeta
				yy10.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `ResourceMeta`)
				r.WriteMapElemValue()
				yy12 := &x.ResourceMeta
				yy12.CodecEncodeSelf(e)
			}
			var yyn14 bool
			if x.GenesisBlock == nil {
				yyn14 = true
				goto LABEL14
			}
		LABEL14:
			if yyr2 || yy2arr2 {
				if yyn14 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.GenesisBlock == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt15 := z.Extension(z.I2Rtid(x.GenesisBlock)); yyxt15 != nil {
							z.EncExtension(x.GenesisBlock, yyxt15)
						} else {
							z.EncFallback(x.GenesisBlock)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `GenesisBlock`)
				r.WriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					if x.GenesisBlock == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt16 := z.Extension(z.I2Rtid(x.GenesisBlock)); yyxt16 != nil {
							z.EncExtension(x.GenesisBlock, yyxt16)
						} else {
							z.EncFallback(x.GenesisBlock)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ServiceInstance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *ServiceInstance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DatabaseID":
			if r.TryDecodeAsNil() {
				x.DatabaseID = ""
			} else {
				x.DatabaseID.CodecDecodeSelf(d)
			}
		case "Peers":
			if r.TryDecodeAsNil() {
				if true && x.Peers != nil {
					x.Peers = nil
				}
			} else {
				if x.Peers == nil {
					x.Peers = new(pkg6_kayak.Peers)
				}

				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.Peers)); yyxt6 != nil {
					z.DecExtension(x.Peers, yyxt6)
				} else {
					z.DecFallback(x.Peers, false)
				}
			}
		case "ResourceMeta":
			if r.TryDecodeAsNil() {
				x.ResourceMeta = ResourceMeta{}
			} else {
				x.ResourceMeta.CodecDecodeSelf(d)
			}
		case "GenesisBlock":
			if r.TryDecodeAsNil() {
				if true && x.GenesisBlock != nil {
					x.GenesisBlock = nil
				}
			} else {
				if x.GenesisBlock == nil {
					x.GenesisBlock = new(pkg7_types.Block)
				}

				x.GenesisBlock.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ServiceInstance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DatabaseID = ""
	} else {
		x.DatabaseID.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Peers != nil {
			x.Peers = nil
		}
	} else {
		if x.Peers == nil {
			x.Peers = new(pkg6_kayak.Peers)
		}

		if false {
		} else if yyxt12 := z.Extension(z.I2Rtid(x.Peers)); yyxt12 != nil {
			z.DecExtension(x.Peers, yyxt12)
		} else {
			z.DecFallback(x.Peers, false)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResourceMeta = ResourceMeta{}
	} else {
		x.ResourceMeta.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.GenesisBlock != nil {
			x.GenesisBlock = nil
		}
	} else {
		if x.GenesisBlock == nil {
			x.GenesisBlock = new(pkg7_types.Block)
		}

		x.GenesisBlock.CodecDecodeSelf(d)
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *InitServiceResponseHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceServiceInstance(([]ServiceInstance)(x.Instances), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Instances`)
				r.WriteMapElemValue()
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceServiceInstance(([]ServiceInstance)(x.Instances), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *InitServiceResponseHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *InitServiceResponseHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Instances":
			if r.TryDecodeAsNil() {
				x.Instances = nil
			} else {
				if false {
				} else {
					h.decSliceServiceInstance((*[]ServiceInstance)(&x.Instances), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *InitServiceResponseHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Instances = nil
	} else {
		if false {
		} else {
			h.decSliceServiceInstance((*[]ServiceInstance)(&x.Instances), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedInitServiceResponseHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceServiceInstance(([]ServiceInstance)(x.Instances), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Instances`)
				r.WriteMapElemValue()
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceServiceInstance(([]ServiceInstance)(x.Instances), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.HeaderHash
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(yy7)); yyxt8 != nil {
					z.EncExtension(yy7, yyxt8)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy7), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `HeaderHash`)
				r.WriteMapElemValue()
				yy9 := &x.HeaderHash
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy9), e)
				}
			}
			var yyn11 bool
			if x.Signee == nil {
				yyn11 = true
				goto LABEL11
			}
		LABEL11:
			if yyr2 || yy2arr2 {
				if yyn11 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt12 := z.Extension(z.I2Rtid(x.Signee)); yyxt12 != nil {
							z.EncExtension(x.Signee, yyxt12)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signee`)
				r.WriteMapElemValue()
				if yyn11 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.Signee)); yyxt13 != nil {
							z.EncExtension(x.Signee, yyxt13)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn14 bool
			if x.Signature == nil {
				yyn14 = true
				goto LABEL14
			}
		LABEL14:
			if yyr2 || yy2arr2 {
				if yyn14 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt15 := z.Extension(z.I2Rtid(x.Signature)); yyxt15 != nil {
							z.EncExtension(x.Signature, yyxt15)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signature`)
				r.WriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt16 := z.Extension(z.I2Rtid(x.Signature)); yyxt16 != nil {
							z.EncExtension(x.Signature, yyxt16)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedInitServiceResponseHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedInitServiceResponseHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Instances":
			if r.TryDecodeAsNil() {
				x.InitServiceResponseHeader.Instances = nil
			} else {
				if false {
				} else {
					h.decSliceServiceInstance((*[]ServiceInstance)(&x.Instances), d)
				}
			}
		case "HeaderHash":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt7 != nil {
					z.DecExtension(x.HeaderHash, yyxt7)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Signee)); yyxt9 != nil {
					z.DecExtension(x.Signee, yyxt9)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Signature)); yyxt11 != nil {
					z.DecExtension(x.Signature, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedInitServiceResponseHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.InitServiceResponseHeader.Instances = nil
	} else {
		if false {
		} else {
			h.decSliceServiceInstance((*[]ServiceInstance)(&x.Instances), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt16 != nil {
			z.DecExtension(x.HeaderHash, yyxt16)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.Signee)); yyxt18 != nil {
			z.DecExtension(x.Signee, yyxt18)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Signature)); yyxt20 != nil {
			z.DecExtension(x.Signature, yyxt20)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *InitServiceResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Header
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Header`)
				r.WriteMapElemValue()
				yy6 := &x.Header
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *InitServiceResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *InitServiceResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = SignedInitServiceResponseHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *InitServiceResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedInitServiceResponseHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NoAckReportHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.NodeID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `NodeID`)
				r.WriteMapElemValue()
				yysf5 := &x.NodeID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.Response
				yy10.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Response`)
				r.WriteMapElemValue()
				yy12 := &x.Response
				yy12.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *NoAckReportHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *NoAckReportHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "Response":
			if r.TryDecodeAsNil() {
				x.Response = SignedResponseHeader{}
			} else {
				x.Response.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *NoAckReportHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Response = SignedResponseHeader{}
	} else {
		x.Response.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedNoAckReportHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.NodeID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `NodeID`)
				r.WriteMapElemValue()
				yysf5 := &x.NodeID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.Response
				yy10.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Response`)
				r.WriteMapElemValue()
				yy12 := &x.Response
				yy12.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.HeaderHash
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `HeaderHash`)
				r.WriteMapElemValue()
				yy17 := &x.HeaderHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy17), e)
				}
			}
			var yyn19 bool
			if x.Signee == nil {
				yyn19 = true
				goto LABEL19
			}
		LABEL19:
			if yyr2 || yy2arr2 {
				if yyn19 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt20 := z.Extension(z.I2Rtid(x.Signee)); yyxt20 != nil {
							z.EncExtension(x.Signee, yyxt20)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signee`)
				r.WriteMapElemValue()
				if yyn19 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt21 := z.Extension(z.I2Rtid(x.Signee)); yyxt21 != nil {
							z.EncExtension(x.Signee, yyxt21)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn22 bool
			if x.Signature == nil {
				yyn22 = true
				goto LABEL22
			}
		LABEL22:
			if yyr2 || yy2arr2 {
				if yyn22 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt23 := z.Extension(z.I2Rtid(x.Signature)); yyxt23 != nil {
							z.EncExtension(x.Signature, yyxt23)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signature`)
				r.WriteMapElemValue()
				if yyn22 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
							z.EncExtension(x.Signature, yyxt24)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedNoAckReportHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedNoAckReportHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NoAckReportHeader.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.NoAckReportHeader.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "Response":
			if r.TryDecodeAsNil() {
				x.NoAckReportHeader.Response = SignedResponseHeader{}
			} else {
				x.Response.CodecDecodeSelf(d)
			}
		case "HeaderHash":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt9 != nil {
					z.DecExtension(x.HeaderHash, yyxt9)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Signee)); yyxt11 != nil {
					z.DecExtension(x.Signee, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.Signature)); yyxt13 != nil {
					z.DecExtension(x.Signature, yyxt13)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedNoAckReportHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NoAckReportHeader.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NoAckReportHeader.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NoAckReportHeader.Response = SignedResponseHeader{}
	} else {
		x.Response.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt20 != nil {
			z.DecExtension(x.HeaderHash, yyxt20)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.Signee)); yyxt22 != nil {
			z.DecExtension(x.Signee, yyxt22)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
			z.DecExtension(x.Signature, yyxt24)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NoAckReport) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.Header
				yy16.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Header`)
				r.WriteMapElemValue()
				yy18 := &x.Header
				yy18.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *NoAckReport) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *NoAckReport) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = SignedNoAckReportHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *NoAckReport) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.TTL)); yyxt14 != nil {
			z.DecExtension(x.TTL, yyxt14)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Expire)); yyxt16 != nil {
			z.DecExtension(x.Expire, yyxt16)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedNoAckReportHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AggrNoAckReportHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.NodeID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `NodeID`)
				r.WriteMapElemValue()
				yysf5 := &x.NodeID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Reports == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceSignedNoAckReportHeader(([]SignedNoAckReportHeader)(x.Reports), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Reports`)
				r.WriteMapElemValue()
				if x.Reports == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceSignedNoAckReportHeader(([]SignedNoAckReportHeader)(x.Reports), e)
					}
				}
			}
			var yyn12 bool
			if x.Peers == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.Peers)); yyxt13 != nil {
							z.EncExtension(x.Peers, yyxt13)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Peers`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.Peers)); yyxt14 != nil {
							z.EncExtension(x.Peers, yyxt14)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AggrNoAckReportHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *AggrNoAckReportHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "Reports":
			if r.TryDecodeAsNil() {
				x.Reports = nil
			} else {
				if false {
				} else {
					h.decSliceSignedNoAckReportHeader((*[]SignedNoAckReportHeader)(&x.Reports), d)
				}
			}
		case "Peers":
			if r.TryDecodeAsNil() {
				if true && x.Peers != nil {
					x.Peers = nil
				}
			} else {
				if x.Peers == nil {
					x.Peers = new(pkg6_kayak.Peers)
				}

				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Peers)); yyxt10 != nil {
					z.DecExtension(x.Peers, yyxt10)
				} else {
					z.DecFallback(x.Peers, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AggrNoAckReportHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Reports = nil
	} else {
		if false {
		} else {
			h.decSliceSignedNoAckReportHeader((*[]SignedNoAckReportHeader)(&x.Reports), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Peers != nil {
			x.Peers = nil
		}
	} else {
		if x.Peers == nil {
			x.Peers = new(pkg6_kayak.Peers)
		}

		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.Peers)); yyxt18 != nil {
			z.DecExtension(x.Peers, yyxt18)
		} else {
			z.DecFallback(x.Peers, false)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedAggrNoAckReportHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(7)
			} else {
				r.WriteMapStart(7)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.NodeID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `NodeID`)
				r.WriteMapElemValue()
				yysf5 := &x.NodeID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Reports == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceSignedNoAckReportHeader(([]SignedNoAckReportHeader)(x.Reports), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Reports`)
				r.WriteMapElemValue()
				if x.Reports == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceSignedNoAckReportHeader(([]SignedNoAckReportHeader)(x.Reports), e)
					}
				}
			}
			var yyn12 bool
			if x.AggrNoAckReportHeader.Peers == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.Peers)); yyxt13 != nil {
							z.EncExtension(x.Peers, yyxt13)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Peers`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.Peers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.Peers)); yyxt14 != nil {
							z.EncExtension(x.Peers, yyxt14)
						} else {
							z.EncFallback(x.Peers)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.HeaderHash
				if false {
				} else if yyxt17 := z.Extension(z.I2Rtid(yy16)); yyxt17 != nil {
					z.EncExtension(yy16, yyxt17)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy16), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `HeaderHash`)
				r.WriteMapElemValue()
				yy18 := &x.HeaderHash
				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(yy18)); yyxt19 != nil {
					z.EncExtension(yy18, yyxt19)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy18), e)
				}
			}
			var yyn20 bool
			if x.Signee == nil {
				yyn20 = true
				goto LABEL20
			}
		LABEL20:
			if yyr2 || yy2arr2 {
				if yyn20 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt21 := z.Extension(z.I2Rtid(x.Signee)); yyxt21 != nil {
							z.EncExtension(x.Signee, yyxt21)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signee`)
				r.WriteMapElemValue()
				if yyn20 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt22 := z.Extension(z.I2Rtid(x.Signee)); yyxt22 != nil {
							z.EncExtension(x.Signee, yyxt22)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn23 bool
			if x.Signature == nil {
				yyn23 = true
				goto LABEL23
			}
		LABEL23:
			if yyr2 || yy2arr2 {
				if yyn23 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
							z.EncExtension(x.Signature, yyxt24)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signature`)
				r.WriteMapElemValue()
				if yyn23 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt25 := z.Extension(z.I2Rtid(x.Signature)); yyxt25 != nil {
							z.EncExtension(x.Signature, yyxt25)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedAggrNoAckReportHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedAggrNoAckReportHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.AggrNoAckReportHeader.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.AggrNoAckReportHeader.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "Reports":
			if r.TryDecodeAsNil() {
				x.AggrNoAckReportHeader.Reports = nil
			} else {
				if false {
				} else {
					h.decSliceSignedNoAckReportHeader((*[]SignedNoAckReportHeader)(&x.Reports), d)
				}
			}
		case "Peers":
			if r.TryDecodeAsNil() {
				if true && x.AggrNoAckReportHeader.Peers != nil {
					x.AggrNoAckReportHeader.Peers = nil
				}
			} else {
				if x.AggrNoAckReportHeader.Peers == nil {
					x.AggrNoAckReportHeader.Peers = new(pkg6_kayak.Peers)
				}

				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Peers)); yyxt10 != nil {
					z.DecExtension(x.Peers, yyxt10)
				} else {
					z.DecFallback(x.Peers, false)
				}
			}
		case "HeaderHash":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt12 != nil {
					z.DecExtension(x.HeaderHash, yyxt12)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.Signee)); yyxt14 != nil {
					z.DecExtension(x.Signee, yyxt14)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(x.Signature)); yyxt16 != nil {
					z.DecExtension(x.Signature, yyxt16)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedAggrNoAckReportHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AggrNoAckReportHeader.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AggrNoAckReportHeader.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AggrNoAckReportHeader.Reports = nil
	} else {
		if false {
		} else {
			h.decSliceSignedNoAckReportHeader((*[]SignedNoAckReportHeader)(&x.Reports), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.AggrNoAckReportHeader.Peers != nil {
			x.AggrNoAckReportHeader.Peers = nil
		}
	} else {
		if x.AggrNoAckReportHeader.Peers == nil {
			x.AggrNoAckReportHeader.Peers = new(pkg6_kayak.Peers)
		}

		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.Peers)); yyxt24 != nil {
			z.DecExtension(x.Peers, yyxt24)
		} else {
			z.DecFallback(x.Peers, false)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt26 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt26 != nil {
			z.DecExtension(x.HeaderHash, yyxt26)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.Signee)); yyxt28 != nil {
			z.DecExtension(x.Signee, yyxt28)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt30 := z.Extension(z.I2Rtid(x.Signature)); yyxt30 != nil {
			z.DecExtension(x.Signature, yyxt30)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = r.CheckBreak()
		}
		if yyb17 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj17-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AggrNoAckReport) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.Header
				yy16.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Header`)
				r.WriteMapElemValue()
				yy18 := &x.Header
				yy18.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AggrNoAckReport) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *AggrNoAckReport) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = SignedAggrNoAckReportHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AggrNoAckReport) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.TTL)); yyxt14 != nil {
			z.DecExtension(x.TTL, yyxt14)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Expire)); yyxt16 != nil {
			z.DecExtension(x.Expire, yyxt16)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedAggrNoAckReportHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x QueryType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeInt(int64(x))
	}
}

func (x *QueryType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (QueryType)(z.C.IntV(r.DecodeInt64(), 32))
	}
}

func (x *Query) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Pattern))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Pattern`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Pattern))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Args == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicesql_NamedArg(([]pkg8_sql.NamedArg)(x.Args), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Args`)
				r.WriteMapElemValue()
				if x.Args == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicesql_NamedArg(([]pkg8_sql.NamedArg)(x.Args), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Query) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *Query) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Pattern":
			if r.TryDecodeAsNil() {
				x.Pattern = ""
			} else {
				x.Pattern = (string)(r.DecodeString())
			}
		case "Args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				if false {
				} else {
					h.decSlicesql_NamedArg((*[]pkg8_sql.NamedArg)(&x.Args), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Query) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Pattern = ""
	} else {
		x.Pattern = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		if false {
		} else {
			h.decSlicesql_NamedArg((*[]pkg8_sql.NamedArg)(&x.Args), d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RequestPayload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Queries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceQuery(([]Query)(x.Queries), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `qs`)
				r.WriteMapElemValue()
				if x.Queries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceQuery(([]Query)(x.Queries), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *RequestPayload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *RequestPayload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "qs":
			if r.TryDecodeAsNil() {
				x.Queries = nil
			} else {
				if false {
				} else {
					h.decSliceQuery((*[]Query)(&x.Queries), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *RequestPayload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Queries = nil
	} else {
		if false {
		} else {
			h.decSliceQuery((*[]Query)(&x.Queries), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RequestHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.QueryType.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `qt`)
				r.WriteMapElemValue()
				x.QueryType.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf7 := &x.NodeID
				yysf7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				yysf8 := &x.NodeID
				yysf8.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf10 := &x.DatabaseID
				yysf10.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `dbid`)
				r.WriteMapElemValue()
				yysf11 := &x.DatabaseID
				yysf11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `cid`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `seq`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.BatchCount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `bc`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.BatchCount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy25 := &x.QueriesHash
				if false {
				} else if yyxt26 := z.Extension(z.I2Rtid(yy25)); yyxt26 != nil {
					z.EncExtension(yy25, yyxt26)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy25), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `qh`)
				r.WriteMapElemValue()
				yy27 := &x.QueriesHash
				if false {
				} else if yyxt28 := z.Extension(z.I2Rtid(yy27)); yyxt28 != nil {
					z.EncExtension(yy27, yyxt28)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy27), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *RequestHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *RequestHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "qt":
			if r.TryDecodeAsNil() {
				x.QueryType = 0
			} else {
				x.QueryType.CodecDecodeSelf(d)
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "dbid":
			if r.TryDecodeAsNil() {
				x.DatabaseID = ""
			} else {
				x.DatabaseID.CodecDecodeSelf(d)
			}
		case "cid":
			if r.TryDecodeAsNil() {
				x.ConnectionID = 0
			} else {
				x.ConnectionID = (uint64)(r.DecodeUint64())
			}
		case "seq":
			if r.TryDecodeAsNil() {
				x.SeqNo = 0
			} else {
				x.SeqNo = (uint64)(r.DecodeUint64())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "bc":
			if r.TryDecodeAsNil() {
				x.BatchCount = 0
			} else {
				x.BatchCount = (uint64)(r.DecodeUint64())
			}
		case "qh":
			if r.TryDecodeAsNil() {
				x.QueriesHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.QueriesHash)); yyxt13 != nil {
					z.DecExtension(x.QueriesHash, yyxt13)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.QueriesHash), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *RequestHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.QueryType = 0
	} else {
		x.QueryType.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DatabaseID = ""
	} else {
		x.DatabaseID.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ConnectionID = 0
	} else {
		x.ConnectionID = (uint64)(r.DecodeUint64())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SeqNo = 0
	} else {
		x.SeqNo = (uint64)(r.DecodeUint64())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BatchCount = 0
	} else {
		x.BatchCount = (uint64)(r.DecodeUint64())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.QueriesHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.QueriesHash)); yyxt24 != nil {
			z.DecExtension(x.QueriesHash, yyxt24)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.QueriesHash), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *QueryKey) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.NodeID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				yysf5 := &x.NodeID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `cid`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `seq`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *QueryKey) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *QueryKey) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "cid":
			if r.TryDecodeAsNil() {
				x.ConnectionID = 0
			} else {
				x.ConnectionID = (uint64)(r.DecodeUint64())
			}
		case "seq":
			if r.TryDecodeAsNil() {
				x.SeqNo = 0
			} else {
				x.SeqNo = (uint64)(r.DecodeUint64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *QueryKey) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ConnectionID = 0
	} else {
		x.ConnectionID = (uint64)(r.DecodeUint64())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SeqNo = 0
	} else {
		x.SeqNo = (uint64)(r.DecodeUint64())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedRequestHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(11)
			} else {
				r.WriteMapStart(11)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.QueryType.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `qt`)
				r.WriteMapElemValue()
				x.QueryType.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf7 := &x.NodeID
				yysf7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				yysf8 := &x.NodeID
				yysf8.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf10 := &x.DatabaseID
				yysf10.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `dbid`)
				r.WriteMapElemValue()
				yysf11 := &x.DatabaseID
				yysf11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `cid`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.ConnectionID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `seq`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.SeqNo))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.BatchCount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `bc`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.BatchCount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy25 := &x.QueriesHash
				if false {
				} else if yyxt26 := z.Extension(z.I2Rtid(yy25)); yyxt26 != nil {
					z.EncExtension(yy25, yyxt26)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy25), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `qh`)
				r.WriteMapElemValue()
				yy27 := &x.QueriesHash
				if false {
				} else if yyxt28 := z.Extension(z.I2Rtid(yy27)); yyxt28 != nil {
					z.EncExtension(yy27, yyxt28)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy27), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy30 := &x.HeaderHash
				if false {
				} else if yyxt31 := z.Extension(z.I2Rtid(yy30)); yyxt31 != nil {
					z.EncExtension(yy30, yyxt31)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy30), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `hh`)
				r.WriteMapElemValue()
				yy32 := &x.HeaderHash
				if false {
				} else if yyxt33 := z.Extension(z.I2Rtid(yy32)); yyxt33 != nil {
					z.EncExtension(yy32, yyxt33)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy32), e)
				}
			}
			var yyn34 bool
			if x.Signee == nil {
				yyn34 = true
				goto LABEL34
			}
		LABEL34:
			if yyr2 || yy2arr2 {
				if yyn34 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt35 := z.Extension(z.I2Rtid(x.Signee)); yyxt35 != nil {
							z.EncExtension(x.Signee, yyxt35)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if yyn34 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt36 := z.Extension(z.I2Rtid(x.Signee)); yyxt36 != nil {
							z.EncExtension(x.Signee, yyxt36)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn37 bool
			if x.Signature == nil {
				yyn37 = true
				goto LABEL37
			}
		LABEL37:
			if yyr2 || yy2arr2 {
				if yyn37 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt38 := z.Extension(z.I2Rtid(x.Signature)); yyxt38 != nil {
							z.EncExtension(x.Signature, yyxt38)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `s`)
				r.WriteMapElemValue()
				if yyn37 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt39 := z.Extension(z.I2Rtid(x.Signature)); yyxt39 != nil {
							z.EncExtension(x.Signature, yyxt39)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedRequestHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedRequestHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "qt":
			if r.TryDecodeAsNil() {
				x.RequestHeader.QueryType = 0
			} else {
				x.QueryType.CodecDecodeSelf(d)
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.RequestHeader.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "dbid":
			if r.TryDecodeAsNil() {
				x.RequestHeader.DatabaseID = ""
			} else {
				x.DatabaseID.CodecDecodeSelf(d)
			}
		case "cid":
			if r.TryDecodeAsNil() {
				x.RequestHeader.ConnectionID = 0
			} else {
				x.ConnectionID = (uint64)(r.DecodeUint64())
			}
		case "seq":
			if r.TryDecodeAsNil() {
				x.RequestHeader.SeqNo = 0
			} else {
				x.SeqNo = (uint64)(r.DecodeUint64())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.RequestHeader.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "bc":
			if r.TryDecodeAsNil() {
				x.RequestHeader.BatchCount = 0
			} else {
				x.BatchCount = (uint64)(r.DecodeUint64())
			}
		case "qh":
			if r.TryDecodeAsNil() {
				x.RequestHeader.QueriesHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.QueriesHash)); yyxt13 != nil {
					z.DecExtension(x.QueriesHash, yyxt13)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.QueriesHash), d)
				}
			}
		case "hh":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt15 != nil {
					z.DecExtension(x.HeaderHash, yyxt15)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt17 := z.Extension(z.I2Rtid(x.Signee)); yyxt17 != nil {
					z.DecExtension(x.Signee, yyxt17)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(x.Signature)); yyxt19 != nil {
					z.DecExtension(x.Signature, yyxt19)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedRequestHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.QueryType = 0
	} else {
		x.QueryType.CodecDecodeSelf(d)
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.DatabaseID = ""
	} else {
		x.DatabaseID.CodecDecodeSelf(d)
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.ConnectionID = 0
	} else {
		x.ConnectionID = (uint64)(r.DecodeUint64())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.SeqNo = 0
	} else {
		x.SeqNo = (uint64)(r.DecodeUint64())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.BatchCount = 0
	} else {
		x.BatchCount = (uint64)(r.DecodeUint64())
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHeader.QueriesHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt30 := z.Extension(z.I2Rtid(x.QueriesHash)); yyxt30 != nil {
			z.DecExtension(x.QueriesHash, yyxt30)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.QueriesHash), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt32 != nil {
			z.DecExtension(x.HeaderHash, yyxt32)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt34 := z.Extension(z.I2Rtid(x.Signee)); yyxt34 != nil {
			z.DecExtension(x.Signee, yyxt34)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt36 := z.Extension(z.I2Rtid(x.Signature)); yyxt36 != nil {
			z.DecExtension(x.Signature, yyxt36)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Request) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.Header
				yy16.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `h`)
				r.WriteMapElemValue()
				yy18 := &x.Header
				yy18.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy21 := &x.Payload
				yy21.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `p`)
				r.WriteMapElemValue()
				yy23 := &x.Payload
				yy23.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Request) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *Request) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "h":
			if r.TryDecodeAsNil() {
				x.Header = SignedRequestHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		case "p":
			if r.TryDecodeAsNil() {
				x.Payload = RequestPayload{}
			} else {
				x.Payload.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Request) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.TTL)); yyxt15 != nil {
			z.DecExtension(x.TTL, yyxt15)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt17 := z.Extension(z.I2Rtid(x.Expire)); yyxt17 != nil {
			z.DecExtension(x.Expire, yyxt17)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedRequestHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = RequestPayload{}
	} else {
		x.Payload.CodecDecodeSelf(d)
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResponseRow) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Values == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceIntfV(x.Values, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Values`)
				r.WriteMapElemValue()
				if x.Values == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceIntfV(x.Values, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ResponseRow) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *ResponseRow) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				if false {
				} else {
					z.F.DecSliceIntfX(&x.Values, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ResponseRow) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		if false {
		} else {
			z.F.DecSliceIntfX(&x.Values, d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResponsePayload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.Columns, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `c`)
				r.WriteMapElemValue()
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.Columns, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.DeclTypes == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.DeclTypes, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if x.DeclTypes == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.DeclTypes, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Rows == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceResponseRow(([]ResponseRow)(x.Rows), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `r`)
				r.WriteMapElemValue()
				if x.Rows == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceResponseRow(([]ResponseRow)(x.Rows), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ResponsePayload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *ResponsePayload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "c":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Columns, d)
				}
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.DeclTypes = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.DeclTypes, d)
				}
			}
		case "r":
			if r.TryDecodeAsNil() {
				x.Rows = nil
			} else {
				if false {
				} else {
					h.decSliceResponseRow((*[]ResponseRow)(&x.Rows), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ResponsePayload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Columns, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DeclTypes = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.DeclTypes, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Rows = nil
	} else {
		if false {
		} else {
			h.decSliceResponseRow((*[]ResponseRow)(&x.Rows), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResponseHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Request
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `r`)
				r.WriteMapElemValue()
				yy6 := &x.Request
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf9 := &x.NodeID
				yysf9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				yysf10 := &x.NodeID
				yysf10.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.RowCount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `c`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.RowCount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.LogOffset))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `o`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.LogOffset))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy21 := &x.DataHash
				if false {
				} else if yyxt22 := z.Extension(z.I2Rtid(yy21)); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy21), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `dh`)
				r.WriteMapElemValue()
				yy23 := &x.DataHash
				if false {
				} else if yyxt24 := z.Extension(z.I2Rtid(yy23)); yyxt24 != nil {
					z.EncExtension(yy23, yyxt24)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy23), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ResponseHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *ResponseHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.Request = SignedRequestHeader{}
			} else {
				x.Request.CodecDecodeSelf(d)
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "c":
			if r.TryDecodeAsNil() {
				x.RowCount = 0
			} else {
				x.RowCount = (uint64)(r.DecodeUint64())
			}
		case "o":
			if r.TryDecodeAsNil() {
				x.LogOffset = 0
			} else {
				x.LogOffset = (uint64)(r.DecodeUint64())
			}
		case "dh":
			if r.TryDecodeAsNil() {
				x.DataHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.DataHash)); yyxt11 != nil {
					z.DecExtension(x.DataHash, yyxt11)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.DataHash), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ResponseHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Request = SignedRequestHeader{}
	} else {
		x.Request.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RowCount = 0
	} else {
		x.RowCount = (uint64)(r.DecodeUint64())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LogOffset = 0
	} else {
		x.LogOffset = (uint64)(r.DecodeUint64())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DataHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.DataHash)); yyxt20 != nil {
			z.DecExtension(x.DataHash, yyxt20)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.DataHash), d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedResponseHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(9)
			} else {
				r.WriteMapStart(9)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Request
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `r`)
				r.WriteMapElemValue()
				yy6 := &x.Request
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf9 := &x.NodeID
				yysf9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				yysf10 := &x.NodeID
				yysf10.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.RowCount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `c`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.RowCount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.LogOffset))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `o`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.LogOffset))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy21 := &x.DataHash
				if false {
				} else if yyxt22 := z.Extension(z.I2Rtid(yy21)); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy21), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `dh`)
				r.WriteMapElemValue()
				yy23 := &x.DataHash
				if false {
				} else if yyxt24 := z.Extension(z.I2Rtid(yy23)); yyxt24 != nil {
					z.EncExtension(yy23, yyxt24)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy23), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy26 := &x.HeaderHash
				if false {
				} else if yyxt27 := z.Extension(z.I2Rtid(yy26)); yyxt27 != nil {
					z.EncExtension(yy26, yyxt27)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy26), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `h`)
				r.WriteMapElemValue()
				yy28 := &x.HeaderHash
				if false {
				} else if yyxt29 := z.Extension(z.I2Rtid(yy28)); yyxt29 != nil {
					z.EncExtension(yy28, yyxt29)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy28), e)
				}
			}
			var yyn30 bool
			if x.Signee == nil {
				yyn30 = true
				goto LABEL30
			}
		LABEL30:
			if yyr2 || yy2arr2 {
				if yyn30 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt31 := z.Extension(z.I2Rtid(x.Signee)); yyxt31 != nil {
							z.EncExtension(x.Signee, yyxt31)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if yyn30 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt32 := z.Extension(z.I2Rtid(x.Signee)); yyxt32 != nil {
							z.EncExtension(x.Signee, yyxt32)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn33 bool
			if x.Signature == nil {
				yyn33 = true
				goto LABEL33
			}
		LABEL33:
			if yyr2 || yy2arr2 {
				if yyn33 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt34 := z.Extension(z.I2Rtid(x.Signature)); yyxt34 != nil {
							z.EncExtension(x.Signature, yyxt34)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `s`)
				r.WriteMapElemValue()
				if yyn33 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt35 := z.Extension(z.I2Rtid(x.Signature)); yyxt35 != nil {
							z.EncExtension(x.Signature, yyxt35)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedResponseHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedResponseHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.Request = SignedRequestHeader{}
			} else {
				x.Request.CodecDecodeSelf(d)
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.NodeID = ""
			} else {
				x.NodeID.CodecDecodeSelf(d)
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "c":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.RowCount = 0
			} else {
				x.RowCount = (uint64)(r.DecodeUint64())
			}
		case "o":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.LogOffset = 0
			} else {
				x.LogOffset = (uint64)(r.DecodeUint64())
			}
		case "dh":
			if r.TryDecodeAsNil() {
				x.ResponseHeader.DataHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.DataHash)); yyxt11 != nil {
					z.DecExtension(x.DataHash, yyxt11)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.DataHash), d)
				}
			}
		case "h":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt13 != nil {
					z.DecExtension(x.HeaderHash, yyxt13)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.Signee)); yyxt15 != nil {
					z.DecExtension(x.Signee, yyxt15)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt17 := z.Extension(z.I2Rtid(x.Signature)); yyxt17 != nil {
					z.DecExtension(x.Signature, yyxt17)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedResponseHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.Request = SignedRequestHeader{}
	} else {
		x.Request.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.NodeID = ""
	} else {
		x.NodeID.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.RowCount = 0
	} else {
		x.RowCount = (uint64)(r.DecodeUint64())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.LogOffset = 0
	} else {
		x.LogOffset = (uint64)(r.DecodeUint64())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ResponseHeader.DataHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt26 := z.Extension(z.I2Rtid(x.DataHash)); yyxt26 != nil {
			z.DecExtension(x.DataHash, yyxt26)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.DataHash), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt28 != nil {
			z.DecExtension(x.HeaderHash, yyxt28)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt30 := z.Extension(z.I2Rtid(x.Signee)); yyxt30 != nil {
			z.DecExtension(x.Signee, yyxt30)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.Signature)); yyxt32 != nil {
			z.DecExtension(x.Signature, yyxt32)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Response) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Header
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `h`)
				r.WriteMapElemValue()
				yy6 := &x.Header
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.Payload
				yy9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `p`)
				r.WriteMapElemValue()
				yy11 := &x.Payload
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Response) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *Response) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "h":
			if r.TryDecodeAsNil() {
				x.Header = SignedResponseHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		case "p":
			if r.TryDecodeAsNil() {
				x.Payload = ResponsePayload{}
			} else {
				x.Payload.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Response) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedResponseHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = ResponsePayload{}
	} else {
		x.Payload.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x UpdateType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeInt(int64(x))
	}
}

func (x *UpdateType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (UpdateType)(z.C.IntV(r.DecodeInt64(), 32))
	}
}

func (x *UpdateServiceHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.Op.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Op`)
				r.WriteMapElemValue()
				x.Op.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.Instance
				yy7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Instance`)
				r.WriteMapElemValue()
				yy9 := &x.Instance
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UpdateServiceHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *UpdateServiceHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Op":
			if r.TryDecodeAsNil() {
				x.Op = 0
			} else {
				x.Op.CodecDecodeSelf(d)
			}
		case "Instance":
			if r.TryDecodeAsNil() {
				x.Instance = ServiceInstance{}
			} else {
				x.Instance.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UpdateServiceHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Op = 0
	} else {
		x.Op.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Instance = ServiceInstance{}
	} else {
		x.Instance.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedUpdateServiceHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.Op.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Op`)
				r.WriteMapElemValue()
				x.Op.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.Instance
				yy7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Instance`)
				r.WriteMapElemValue()
				yy9 := &x.Instance
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy12 := &x.HeaderHash
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy12), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `HeaderHash`)
				r.WriteMapElemValue()
				yy14 := &x.HeaderHash
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(yy14)); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy14), e)
				}
			}
			var yyn16 bool
			if x.Signee == nil {
				yyn16 = true
				goto LABEL16
			}
		LABEL16:
			if yyr2 || yy2arr2 {
				if yyn16 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt17 := z.Extension(z.I2Rtid(x.Signee)); yyxt17 != nil {
							z.EncExtension(x.Signee, yyxt17)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signee`)
				r.WriteMapElemValue()
				if yyn16 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt18 := z.Extension(z.I2Rtid(x.Signee)); yyxt18 != nil {
							z.EncExtension(x.Signee, yyxt18)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn19 bool
			if x.Signature == nil {
				yyn19 = true
				goto LABEL19
			}
		LABEL19:
			if yyr2 || yy2arr2 {
				if yyn19 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt20 := z.Extension(z.I2Rtid(x.Signature)); yyxt20 != nil {
							z.EncExtension(x.Signature, yyxt20)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Signature`)
				r.WriteMapElemValue()
				if yyn19 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt21 := z.Extension(z.I2Rtid(x.Signature)); yyxt21 != nil {
							z.EncExtension(x.Signature, yyxt21)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedUpdateServiceHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *SignedUpdateServiceHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Op":
			if r.TryDecodeAsNil() {
				x.UpdateServiceHeader.Op = 0
			} else {
				x.Op.CodecDecodeSelf(d)
			}
		case "Instance":
			if r.TryDecodeAsNil() {
				x.UpdateServiceHeader.Instance = ServiceInstance{}
			} else {
				x.Instance.CodecDecodeSelf(d)
			}
		case "HeaderHash":
			if r.TryDecodeAsNil() {
				x.HeaderHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt7 != nil {
					z.DecExtension(x.HeaderHash, yyxt7)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg3_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Signee)); yyxt9 != nil {
					z.DecExtension(x.Signee, yyxt9)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg3_asymmetric.Signature)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Signature)); yyxt11 != nil {
					z.DecExtension(x.Signature, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedUpdateServiceHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UpdateServiceHeader.Op = 0
	} else {
		x.Op.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UpdateServiceHeader.Instance = ServiceInstance{}
	} else {
		x.Instance.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HeaderHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.HeaderHash)); yyxt16 != nil {
			z.DecExtension(x.HeaderHash, yyxt16)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.HeaderHash), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg3_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.Signee)); yyxt18 != nil {
			z.DecExtension(x.Signee, yyxt18)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg3_asymmetric.Signature)
		}

		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Signature)); yyxt20 != nil {
			z.DecExtension(x.Signature, yyxt20)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *UpdateService) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81464, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy16 := &x.Header
				yy16.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81464, `Header`)
				r.WriteMapElemValue()
				yy18 := &x.Header
				yy18.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UpdateService) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *UpdateService) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = SignedUpdateServiceHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UpdateService) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.TTL)); yyxt14 != nil {
			z.DecExtension(x.TTL, yyxt14)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Expire)); yyxt16 != nil {
			z.DecExtension(x.Expire, yyxt16)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = SignedUpdateServiceHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *UpdateServiceResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(0)
			} else {
				r.WriteMapStart(0)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *UpdateServiceResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1464 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1464 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1464)
		}
	}
}

func (x *UpdateServiceResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *UpdateServiceResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1464) enchash_Hash(v *pkg2_hash.Hash, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferCcRAW1464, ((*[32]byte)(v))[:])
}

func (x codecSelfer1464) dechash_Hash(v *pkg2_hash.Hash, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer1464) encSliceServiceInstance(v []ServiceInstance, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1464) decSliceServiceInstance(v *[]ServiceInstance, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ServiceInstance{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ServiceInstance, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]ServiceInstance, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ServiceInstance{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ServiceInstance{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]ServiceInstance, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1464) encSliceSignedNoAckReportHeader(v []SignedNoAckReportHeader, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1464) decSliceSignedNoAckReportHeader(v *[]SignedNoAckReportHeader, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []SignedNoAckReportHeader{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 392)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]SignedNoAckReportHeader, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 392)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]SignedNoAckReportHeader, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, SignedNoAckReportHeader{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = SignedNoAckReportHeader{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]SignedNoAckReportHeader, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1464) encSlicesql_NamedArg(v []pkg8_sql.NamedArg, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		if false {
		} else if yyxt3 := z.Extension(z.I2Rtid(yy2)); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.EncFallback(yy2)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1464) decSlicesql_NamedArg(v *[]pkg8_sql.NamedArg, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg8_sql.NamedArg{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg8_sql.NamedArg, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg8_sql.NamedArg, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg8_sql.NamedArg{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg8_sql.NamedArg{}
				} else {
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						z.DecFallback(&yyv1[yyj1], false)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg8_sql.NamedArg, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1464) encSliceQuery(v []Query, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1464) decSliceQuery(v *[]Query, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Query{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 40)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Query, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 40)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Query, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Query{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Query{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Query, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1464) encSliceResponseRow(v []ResponseRow, e *codec1978.Encoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1464) decSliceResponseRow(v *[]ResponseRow, d *codec1978.Decoder) {
	var h codecSelfer1464
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ResponseRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ResponseRow, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]ResponseRow, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ResponseRow{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ResponseRow{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]ResponseRow, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
