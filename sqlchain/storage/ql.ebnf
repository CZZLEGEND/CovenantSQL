ascii_letter = "a" … "z" | "A" … "Z" .
byte_value = octal_byte_value | hex_byte_value .
decimal_digit = "0" … "9" .
decimal_lit = ( "1" … "9" ) { decimal_digit } .
decimals = decimal_digit { decimal_digit } .
escaped_char = "\\" (
		  "a"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| "v"
		| "\\"
		| "'"
		| "\""
	  ) .
exponent = ( "e" | "E" ) [ "+" | "-" ] decimals .
float_lit = decimals "." [ decimals ] [ exponent ]
	| decimals exponent
	| "." decimals [ exponent ] .
hex_byte_value = "\\" "x" hex_digit hex_digit .
hex_digit = "0" … "9"
	| "A" … "F"
	| "a" … "f" .
hex_lit = "0" ( "x" | "X" ) hex_digit { hex_digit } .
identifier = letter { letter | decimal_digit } .
int_lit = decimal_lit
	| octal_lit
	| hex_lit .
letter = ascii_letter | "_" .
octal_byte_value = "\\" octal_digit octal_digit octal_digit .
octal_digit = "0" … "7" .
octal_lit = "0" { octal_digit } .
ql_parameter = ( "?" | "$" ) "1" … "9" { "0" … "9" } .
string_lit = "\"" { unicode_value | byte_value } "\""
	| "'" { unicode_value | byte_value } "'" .
unicode_value = escaped_char .

AlterTableStmt = "ALTER" "TABLE" TableName (
		  "ADD" [ "COLUMN" ] ColumnDef
		| "RENAME" "TO" TableName
	  ) .
Call = "(" [ ExpressionList ] ")" .
ColumnConstraint = [ "CONSTRAINT" ConstraintName ] (
		  "PRIMARY" "KEY" [ "ASC" | "DESC" ] ConflictClause [ "AUTOINCREMENT" ]
		| "NOT" "NULL" ConflictClause
		| "UNIQUE" ConflictClause
		| "DEFAULT" Literal
	  ) .
ColumnDef = ColumnName [ Type ] [ ColumnConstraint ] .
ColumnName = identifier .
ColumnNameList = ColumnName { "," ColumnName } .
ConflictClause = [
		 "ON" "CONFLICT" [
			  "FAIL"
			| "IGNORE"
			| "REPLACE"
		  ]
	  ] .
ConstraintName = identifier .
Conversion = "CAST" "(" Expression "AS" TypeName ")" .
CreateIndexStmt = "CREATE" [ "UNIQUE" ] "INDEX" [
		 "IF" "NOT" "EXISTS"
	  ] IndexName "ON" TableName "(" IndexedColumnList ")" [ "WHERE" Expression ] .
CreateTableStmt = "CREATE" "TABLE" [
		 "IF" "NOT" "EXISTS"
	  ] TableName (
		  "(" ColumnDef {
			  "," ColumnDef
			| "," TableConstraint
		  } ")"
		| "AS" SelectStmt
	  ) .
DeleteFromStmt = "DELETE" "FROM" TableName [ WhereClause ] .
DropIndexStmt = "DROP" "INDEX" [ "IF" "EXISTS" ] IndexName .
DropTableStmt = "DROP" "TABLE" [ "IF" "EXISTS" ] TableName .
EmptyStmt = .
Expression = Term { "OR" Term } .
ExpressionList = Expression { "," Expression } .
Factor = PrimaryFactor {
		 (
			  ">="
			| ">"
			| "<="
			| "<"
			| "!="
			| "=="
			| "="
			| "LIKE"
			| "GLOB"
			| "REGEXP"
			| "MATCH"
			| "IS" [ "NOT" ]
		  ) PrimaryFactor
	  } [ Predicate ] .
Field = Expression [ "AS" identifier ] .
FieldList = Field { "," Field } .
GroupByClause = "GROUP BY" ColumnNameList [ "HAVING" Expression ] .
IndexName = identifier .
IndexedColumn = ColumnName [ "ASC" | "DESC" ] .
IndexedColumnList = IndexedColumn { "," IndexedColumn } .
InsertIntoStmt = (
		  "INSERT"
		| "REPLACE"
		| "INSERT" "OR" "REPLACE"
		| "INSERT" "OR" "FAIL"
		| "INSERT" "OR" "IGNORE"
	  ) "INTO" TableName [
		 "(" ColumnNameList ")"
	  ] (
		  (
			 "VALUES" "(" Expression { "," Expression } ")" {
				 "," "(" Expression { "," Expression } ")"
			  }
		  )
		| SelectStmt
		| "DEFAULT" "VALUES"
	  ) .
JoinClause = [ "NATURAL" ] (
		  "LEFT" [ "OUTER" ]
		| "INNER"
		| "CROSS"
	  ) "JOIN" RecordSet [
		  "ON" Expression
		| "USING" "(" ColumnName { "," ColumnName } ")"
	  ] .
Literal = "FALSE"
	| "NULL"
	| "TRUE"
	| float_lit
	| int_lit
	| string_lit
	| ql_parameter .
Operand = Literal
	| QualifiedIdent
	| "(" Expression ")" .
OrderBy = "ORDER" "BY" ExpressionList [ "ASC" | "DESC" ] .
PragmaTableInfoStmt = "PRAGMA" "table_info" "(" TableName ")" .
Predicate = (
		  [ "NOT" ] (
			  "IN" "(" ExpressionList ")"
			| "IN" "(" SelectStmt ")"
			| "BETWEEN" PrimaryFactor "AND" PrimaryFactor
		  )
		| "ISNULL"
		| "NOTNULL"
		| "NOT" "NULL"
	  ) .
PrimaryExpression = Operand
	| Conversion
	| PrimaryExpression Call .
PrimaryFactor = PrimaryTerm {
		 (
			  "^"
			| "|"
			| "-"
			| "+"
		  ) PrimaryTerm
	  } .
PrimaryTerm = UnaryExpr {
		 (
			  "&"
			| "<<"
			| ">>"
			| "%"
			| "/"
			| "*"
		  ) UnaryExpr
	  } .
QualifiedIdent = identifier [ "." identifier ] .
RecordSet = (
		  TableName
		| "(" SelectStmt [ ";" ] ")"
	  ) [ "AS" identifier ] .
RecordSetList = RecordSet { "," RecordSet } [ "," ] .
SelectStmt = "SELECT" [ "DISTINCT" | "ALL" ] ( "*" | FieldList ) [ "FROM" RecordSetList ] [ JoinClause ] [ WhereClause ] [ GroupByClause ] [ OrderBy ] [
		 "Limit" Expression [
			 ( "Offset" | "," ) Expression
		  ]
	  ] .
Statement = EmptyStmt
	| AlterTableStmt
	| CreateIndexStmt
	| CreateTableStmt
	| DeleteFromStmt
	| DropIndexStmt
	| DropTableStmt
	| InsertIntoStmt
	| SelectStmt
	| UpdateStmt
	| PragmaTableInfoStmt .
StatementList = Statement { ";" Statement } .
TableConstraint = [ "CONSTRAINT" ConstraintName ] (
		  "PRIMARY" "KEY"
		| "UNIQUE"
	  ) "(" IndexedColumnList ")" ConflictClause .
TableName = identifier .
Term = Factor { "AND" Factor } .
Type = TypeName [
		 "(" decimal_lit [ "," decimal_lit ] ")"
	  ] .
TypeName = "INTEGER"
	| "INT"
	| "TINYINT"
	| "SMALLINT"
	| "MEDIUMINT"
	| "BIGINT"
	| "INT2"
	| "INT8"
	| "CHARACTER"
	| "VARCHAR"
	| "NCHAR"
	| "NVARCHAR"
	| "TEXT"
	| "BLOB"
	| "DOUBLE"
	| "FLOAT"
	| "NUMERIC"
	| "DECIMAL"
	| "BOOLEAN"
	| "BOOL"
	| "DATE"
	| "DATETIME" .
UnaryExpr = [ "-" | "+" ] PrimaryExpression .
UpdateStmt = "UPDATE" [
		  "OR" "REPLACE"
		| "OR" "FAIL"
		| "OR" "IGNORE"
	  ] TableName "SET" ColumnName "=" Expression {
		 "," ColumnName "=" Expression
	  } [ WhereClause ] .
WhereClause = "WHERE" Expression
	| "WHERE" "EXISTS" "(" SelectStmt ")"
	| "WHERE" "NOT" "EXISTS" "(" SelectStmt ")" .
