// Code generated by codecgen - DO NOT EDIT.

package types

import (
	pkg5_elliptic "crypto/elliptic"
	"errors"
	pkg3_types "github.com/CovenantSQL/CovenantSQL/blockproducer/types"
	pkg4_asymmetric "github.com/CovenantSQL/CovenantSQL/crypto/asymmetric"
	pkg2_hash "github.com/CovenantSQL/CovenantSQL/crypto/hash"
	pkg1_proto "github.com/CovenantSQL/CovenantSQL/proto"
	codec1978 "github.com/ugorji/go/codec"
	pkg6_big "math/big"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF81625 = 1
	codecSelferCcRAW1625  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1625  = 10
	codecSelferValueTypeMap1625    = 9
	codecSelferValueTypeString1625 = 6
	codecSelferValueTypeInt1625    = 2
	codecSelferValueTypeUint1625   = 3
	codecSelferValueTypeFloat1625  = 4
	codecSelferBitsize1625         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1625 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1625 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg5_elliptic.Curve
		var v1 pkg3_types.BillingRequest
		var v2 pkg4_asymmetric.PublicKey
		var v3 pkg2_hash.Hash
		var v4 pkg1_proto.Envelope
		var v5 pkg6_big.Int
		var v6 time.Duration
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *AdviseBillingReq) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81625, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81625, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			var yyn15 bool
			if x.Req == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Req == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt16 := z.Extension(z.I2Rtid(x.Req)); yyxt16 != nil {
							z.EncExtension(x.Req, yyxt16)
						} else {
							z.EncFallback(x.Req)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Req`)
				r.WriteMapElemValue()
				if yyn15 {
					r.EncodeNil()
				} else {
					if x.Req == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt17 := z.Extension(z.I2Rtid(x.Req)); yyxt17 != nil {
							z.EncExtension(x.Req, yyxt17)
						} else {
							z.EncFallback(x.Req)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AdviseBillingReq) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1625 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1625 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1625)
		}
	}
}

func (x *AdviseBillingReq) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "Req":
			if r.TryDecodeAsNil() {
				if true && x.Req != nil {
					x.Req = nil
				}
			} else {
				if x.Req == nil {
					x.Req = new(pkg3_types.BillingRequest)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Req)); yyxt11 != nil {
					z.DecExtension(x.Req, yyxt11)
				} else {
					z.DecFallback(x.Req, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AdviseBillingReq) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.TTL)); yyxt15 != nil {
			z.DecExtension(x.TTL, yyxt15)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt17 := z.Extension(z.I2Rtid(x.Expire)); yyxt17 != nil {
			z.DecExtension(x.Expire, yyxt17)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Req != nil {
			x.Req = nil
		}
	} else {
		if x.Req == nil {
			x.Req = new(pkg3_types.BillingRequest)
		}

		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Req)); yyxt20 != nil {
			z.DecExtension(x.Req, yyxt20)
		} else {
			z.DecFallback(x.Req, false)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AdviseBillingResp) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81625, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `v`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF81625, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.TTL)); yyxt7 != nil {
					z.EncExtension(x.TTL, yyxt7)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `t`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.TTL)); yyxt8 != nil {
					z.EncExtension(x.TTL, yyxt8)
				} else {
					r.EncodeInt(int64(x.TTL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Expire)); yyxt10 != nil {
					z.EncExtension(x.Expire, yyxt10)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `e`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expire)); yyxt11 != nil {
					z.EncExtension(x.Expire, yyxt11)
				} else {
					r.EncodeInt(int64(x.Expire))
				}
			}
			var yyn12 bool
			if x.Envelope.NodeID == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.NodeID)); yyxt13 != nil {
							z.EncExtension(x.NodeID, yyxt13)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `id`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.NodeID == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt14 := z.Extension(z.I2Rtid(x.NodeID)); yyxt14 != nil {
							z.EncExtension(x.NodeID, yyxt14)
						} else {
							z.EncFallback(x.NodeID)
						}
					}
				}
			}
			var yyn15 bool
			if x.Resp == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Resp == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt16 := z.Extension(z.I2Rtid(x.Resp)); yyxt16 != nil {
							z.EncExtension(x.Resp, yyxt16)
						} else {
							z.EncFallback(x.Resp)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Resp`)
				r.WriteMapElemValue()
				if yyn15 {
					r.EncodeNil()
				} else {
					if x.Resp == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt17 := z.Extension(z.I2Rtid(x.Resp)); yyxt17 != nil {
							z.EncExtension(x.Resp, yyxt17)
						} else {
							z.EncFallback(x.Resp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *AdviseBillingResp) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1625 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1625 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1625)
		}
	}
}

func (x *AdviseBillingResp) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "v":
			if r.TryDecodeAsNil() {
				x.Envelope.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "t":
			if r.TryDecodeAsNil() {
				x.Envelope.TTL = 0
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.TTL)); yyxt6 != nil {
					z.DecExtension(x.TTL, yyxt6)
				} else {
					x.TTL = (time.Duration)(r.DecodeInt64())
				}
			}
		case "e":
			if r.TryDecodeAsNil() {
				x.Envelope.Expire = 0
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Expire)); yyxt8 != nil {
					z.DecExtension(x.Expire, yyxt8)
				} else {
					x.Expire = (time.Duration)(r.DecodeInt64())
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				if true && x.Envelope.NodeID != nil {
					x.Envelope.NodeID = nil
				}
			} else {
				if x.Envelope.NodeID == nil {
					x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
				}

				x.NodeID.CodecDecodeSelf(d)
			}
		case "Resp":
			if r.TryDecodeAsNil() {
				if true && x.Resp != nil {
					x.Resp = nil
				}
			} else {
				if x.Resp == nil {
					x.Resp = new(pkg3_types.BillingRequest)
				}

				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Resp)); yyxt11 != nil {
					z.DecExtension(x.Resp, yyxt11)
				} else {
					z.DecFallback(x.Resp, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *AdviseBillingResp) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.TTL = 0
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.TTL)); yyxt15 != nil {
			z.DecExtension(x.TTL, yyxt15)
		} else {
			x.TTL = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Envelope.Expire = 0
	} else {
		if false {
		} else if yyxt17 := z.Extension(z.I2Rtid(x.Expire)); yyxt17 != nil {
			z.DecExtension(x.Expire, yyxt17)
		} else {
			x.Expire = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Envelope.NodeID != nil {
			x.Envelope.NodeID = nil
		}
	} else {
		if x.Envelope.NodeID == nil {
			x.Envelope.NodeID = new(pkg1_proto.RawNodeID)
		}

		x.NodeID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Resp != nil {
			x.Resp = nil
		}
	} else {
		if x.Resp == nil {
			x.Resp = new(pkg3_types.BillingRequest)
		}

		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Resp)); yyxt20 != nil {
			z.DecExtension(x.Resp, yyxt20)
		} else {
			z.DecFallback(x.Resp, false)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Header) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Version`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf7 := &x.Producer
				yysf7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Producer`)
				r.WriteMapElemValue()
				yysf8 := &x.Producer
				yysf8.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.GenesisHash
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy10), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `GenesisHash`)
				r.WriteMapElemValue()
				yy12 := &x.GenesisHash
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy12), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.ParentHash
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `ParentHash`)
				r.WriteMapElemValue()
				yy17 := &x.ParentHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy17), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy20 := &x.MerkleRoot
				if false {
				} else if yyxt21 := z.Extension(z.I2Rtid(yy20)); yyxt21 != nil {
					z.EncExtension(yy20, yyxt21)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy20), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `MerkleRoot`)
				r.WriteMapElemValue()
				yy22 := &x.MerkleRoot
				if false {
				} else if yyxt23 := z.Extension(z.I2Rtid(yy22)); yyxt23 != nil {
					z.EncExtension(yy22, yyxt23)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy22), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Header) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1625 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1625 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1625)
		}
	}
}

func (x *Header) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Version":
			if r.TryDecodeAsNil() {
				x.Version = 0
			} else {
				x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.Producer = ""
			} else {
				x.Producer.CodecDecodeSelf(d)
			}
		case "GenesisHash":
			if r.TryDecodeAsNil() {
				x.GenesisHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.GenesisHash)); yyxt7 != nil {
					z.DecExtension(x.GenesisHash, yyxt7)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.GenesisHash), d)
				}
			}
		case "ParentHash":
			if r.TryDecodeAsNil() {
				x.ParentHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt9 != nil {
					z.DecExtension(x.ParentHash, yyxt9)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.ParentHash), d)
				}
			}
		case "MerkleRoot":
			if r.TryDecodeAsNil() {
				x.MerkleRoot = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt11 != nil {
					z.DecExtension(x.MerkleRoot, yyxt11)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.MerkleRoot), d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Header) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = 0
	} else {
		x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Producer = ""
	} else {
		x.Producer.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GenesisHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.GenesisHash)); yyxt18 != nil {
			z.DecExtension(x.GenesisHash, yyxt18)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.GenesisHash), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ParentHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt20 != nil {
			z.DecExtension(x.ParentHash, yyxt20)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.ParentHash), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MerkleRoot = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt22 != nil {
			z.DecExtension(x.MerkleRoot, yyxt22)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.MerkleRoot), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(9)
			} else {
				r.WriteMapStart(9)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Version`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf7 := &x.Producer
				yysf7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Producer`)
				r.WriteMapElemValue()
				yysf8 := &x.Producer
				yysf8.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.GenesisHash
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy10), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `GenesisHash`)
				r.WriteMapElemValue()
				yy12 := &x.GenesisHash
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy12), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.ParentHash
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `ParentHash`)
				r.WriteMapElemValue()
				yy17 := &x.ParentHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy17), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy20 := &x.MerkleRoot
				if false {
				} else if yyxt21 := z.Extension(z.I2Rtid(yy20)); yyxt21 != nil {
					z.EncExtension(yy20, yyxt21)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy20), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `MerkleRoot`)
				r.WriteMapElemValue()
				yy22 := &x.MerkleRoot
				if false {
				} else if yyxt23 := z.Extension(z.I2Rtid(yy22)); yyxt23 != nil {
					z.EncExtension(yy22, yyxt23)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy22), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy28 := &x.BlockHash
				if false {
				} else if yyxt29 := z.Extension(z.I2Rtid(yy28)); yyxt29 != nil {
					z.EncExtension(yy28, yyxt29)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy28), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `BlockHash`)
				r.WriteMapElemValue()
				yy30 := &x.BlockHash
				if false {
				} else if yyxt31 := z.Extension(z.I2Rtid(yy30)); yyxt31 != nil {
					z.EncExtension(yy30, yyxt31)
				} else {
					h.enchash_Hash((*pkg2_hash.Hash)(yy30), e)
				}
			}
			var yyn32 bool
			if x.Signee == nil {
				yyn32 = true
				goto LABEL32
			}
		LABEL32:
			if yyr2 || yy2arr2 {
				if yyn32 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt33 := z.Extension(z.I2Rtid(x.Signee)); yyxt33 != nil {
							z.EncExtension(x.Signee, yyxt33)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Signee`)
				r.WriteMapElemValue()
				if yyn32 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt34 := z.Extension(z.I2Rtid(x.Signee)); yyxt34 != nil {
							z.EncExtension(x.Signee, yyxt34)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn35 bool
			if x.Signature == nil {
				yyn35 = true
				goto LABEL35
			}
		LABEL35:
			if yyr2 || yy2arr2 {
				if yyn35 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt36 := z.Extension(z.I2Rtid(x.Signature)); yyxt36 != nil {
							z.EncExtension(x.Signature, yyxt36)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Signature`)
				r.WriteMapElemValue()
				if yyn35 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt37 := z.Extension(z.I2Rtid(x.Signature)); yyxt37 != nil {
							z.EncExtension(x.Signature, yyxt37)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1625 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1625 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1625)
		}
	}
}

func (x *SignedHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Version":
			if r.TryDecodeAsNil() {
				x.Header.Version = 0
			} else {
				x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.Header.Producer = ""
			} else {
				x.Producer.CodecDecodeSelf(d)
			}
		case "GenesisHash":
			if r.TryDecodeAsNil() {
				x.Header.GenesisHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.GenesisHash)); yyxt7 != nil {
					z.DecExtension(x.GenesisHash, yyxt7)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.GenesisHash), d)
				}
			}
		case "ParentHash":
			if r.TryDecodeAsNil() {
				x.Header.ParentHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt9 != nil {
					z.DecExtension(x.ParentHash, yyxt9)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.ParentHash), d)
				}
			}
		case "MerkleRoot":
			if r.TryDecodeAsNil() {
				x.Header.MerkleRoot = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt11 != nil {
					z.DecExtension(x.MerkleRoot, yyxt11)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.MerkleRoot), d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Header.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "BlockHash":
			if r.TryDecodeAsNil() {
				x.BlockHash = pkg2_hash.Hash{}
			} else {
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.BlockHash)); yyxt15 != nil {
					z.DecExtension(x.BlockHash, yyxt15)
				} else {
					h.dechash_Hash((*pkg2_hash.Hash)(&x.BlockHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt17 := z.Extension(z.I2Rtid(x.Signee)); yyxt17 != nil {
					z.DecExtension(x.Signee, yyxt17)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(x.Signature)); yyxt19 != nil {
					z.DecExtension(x.Signature, yyxt19)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Version = 0
	} else {
		x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Producer = ""
	} else {
		x.Producer.CodecDecodeSelf(d)
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.GenesisHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.GenesisHash)); yyxt24 != nil {
			z.DecExtension(x.GenesisHash, yyxt24)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.GenesisHash), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.ParentHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt26 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt26 != nil {
			z.DecExtension(x.ParentHash, yyxt26)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.ParentHash), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.MerkleRoot = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt28 != nil {
			z.DecExtension(x.MerkleRoot, yyxt28)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.MerkleRoot), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BlockHash = pkg2_hash.Hash{}
	} else {
		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.BlockHash)); yyxt32 != nil {
			z.DecExtension(x.BlockHash, yyxt32)
		} else {
			h.dechash_Hash((*pkg2_hash.Hash)(&x.BlockHash), d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt34 := z.Extension(z.I2Rtid(x.Signee)); yyxt34 != nil {
			z.DecExtension(x.Signee, yyxt34)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt36 := z.Extension(z.I2Rtid(x.Signature)); yyxt36 != nil {
			z.DecExtension(x.Signature, yyxt36)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Block) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.SignedHeader
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `SignedHeader`)
				r.WriteMapElemValue()
				yy6 := &x.SignedHeader
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Queries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtohash_Hash(([]*pkg2_hash.Hash)(x.Queries), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF81625, `Queries`)
				r.WriteMapElemValue()
				if x.Queries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtohash_Hash(([]*pkg2_hash.Hash)(x.Queries), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Block) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1625 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1625 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1625)
		}
	}
}

func (x *Block) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "SignedHeader":
			if r.TryDecodeAsNil() {
				x.SignedHeader = SignedHeader{}
			} else {
				x.SignedHeader.CodecDecodeSelf(d)
			}
		case "Queries":
			if r.TryDecodeAsNil() {
				x.Queries = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtohash_Hash((*[]*pkg2_hash.Hash)(&x.Queries), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Block) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SignedHeader = SignedHeader{}
	} else {
		x.SignedHeader.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Queries = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtohash_Hash((*[]*pkg2_hash.Hash)(&x.Queries), d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x Blocks) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encBlocks((Blocks)(x), e)
		}
	}
}

func (x *Blocks) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decBlocks((*Blocks)(x), d)
	}
}

func (x codecSelfer1625) enchash_Hash(v *pkg2_hash.Hash, e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferCcRAW1625, ((*[32]byte)(v))[:])
}

func (x codecSelfer1625) dechash_Hash(v *pkg2_hash.Hash, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer1625) encSlicePtrtohash_Hash(v []*pkg2_hash.Hash, e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				h.enchash_Hash((*pkg2_hash.Hash)(yyv1), e)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1625) decSlicePtrtohash_Hash(v *[]*pkg2_hash.Hash, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*pkg2_hash.Hash{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*pkg2_hash.Hash, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*pkg2_hash.Hash, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(pkg2_hash.Hash)
					}
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						h.dechash_Hash((*pkg2_hash.Hash)(yyv1[yyj1]), d)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*pkg2_hash.Hash, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1625) encBlocks(v Blocks, e *codec1978.Encoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer1625) decBlocks(v *Blocks, d *codec1978.Decoder) {
	var h codecSelfer1625
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Block{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Block, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Block, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Block)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Block, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
