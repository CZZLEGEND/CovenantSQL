package main

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *EtherIn) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84, 0x84)
	if oTemp, err := z.EthValue.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	o = hsp.AppendString(o, z.From)
	o = append(o, 0x84)
	o = hsp.AppendString(o, z.Target)
	o = append(o, 0x84)
	o = hsp.AppendUint64(o, z.SequenceID)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EtherIn) Msgsize() (s int) {
	s = 1 + 9 + z.EthValue.Msgsize() + 5 + hsp.StringPrefixSize + len(z.From) + 7 + hsp.StringPrefixSize + len(z.Target) + 11 + hsp.Uint64Size
	return
}
