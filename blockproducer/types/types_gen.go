package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	"github.com/CovenantSQL/HashStablePack/msgp"
)

// MarshalHash marshals for hash
func (z *Account) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	o = append(o, 0x87, 0x87)
	if oTemp, err := z.Address.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x87)
	o = msgp.AppendUint64(o, z.StableCoinBalance)
	o = append(o, 0x87)
	o = msgp.AppendUint64(o, z.ThunderCoinBalance)
	o = append(o, 0x87)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SQLChains)))
	for za0001 := range z.SQLChains {
		if oTemp, err := z.SQLChains[za0001].MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x87)
	o = msgp.AppendBytes(o, z.Roles)
	o = append(o, 0x87)
	o = msgp.AppendFloat64(o, z.Rating)
	o = append(o, 0x87)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxBillings)))
	for za0002 := range z.TxBillings {
		if z.TxBillings[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.TxBillings[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Account) Msgsize() (s int) {
	s = 1 + 8 + z.Address.Msgsize() + 18 + msgp.Uint64Size + 19 + msgp.Uint64Size + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.SQLChains {
		s += z.SQLChains[za0001].Msgsize()
	}
	s += 6 + msgp.BytesPrefixSize + len(z.Roles) + 7 + msgp.Float64Size + 11 + msgp.ArrayHeaderSize
	for za0002 := range z.TxBillings {
		if z.TxBillings[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.TxBillings[za0002].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *BillingRequest) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84, 0x84)
	if oTemp, err := z.Header.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if oTemp, err := z.RequestHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Signees)))
	for za0001 := range z.Signees {
		if z.Signees[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.Signees[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	o = append(o, 0x84)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Signatures)))
	for za0002 := range z.Signatures {
		if z.Signatures[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.Signatures[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BillingRequest) Msgsize() (s int) {
	s = 1 + 7 + z.Header.Msgsize() + 12 + z.RequestHash.Msgsize() + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Signees {
		if z.Signees[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Signees[za0001].Msgsize()
		}
	}
	s += 11 + msgp.ArrayHeaderSize
	for za0002 := range z.Signatures {
		if z.Signatures[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Signatures[za0002].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *BillingRequestHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	o = append(o, 0x86, 0x86)
	if oTemp, err := z.DatabaseID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x86)
	if oTemp, err := z.LowBlock.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x86)
	o = msgp.AppendInt32(o, z.LowHeight)
	o = append(o, 0x86)
	if oTemp, err := z.HighBlock.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x86)
	o = msgp.AppendInt32(o, z.HighHeight)
	o = append(o, 0x86)
	o = msgp.AppendArrayHeader(o, uint32(len(z.GasAmounts)))
	for za0001 := range z.GasAmounts {
		if z.GasAmounts[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.GasAmounts[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BillingRequestHeader) Msgsize() (s int) {
	s = 1 + 11 + z.DatabaseID.Msgsize() + 9 + z.LowBlock.Msgsize() + 10 + msgp.Int32Size + 10 + z.HighBlock.Msgsize() + 11 + msgp.Int32Size + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.GasAmounts {
		if z.GasAmounts[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.GasAmounts[za0001].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *BillingResponse) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84, 0x84)
	if oTemp, err := z.AccountAddress.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if oTemp, err := z.RequestHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if z.Signee == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signee.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x84)
	if z.Signature == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signature.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BillingResponse) Msgsize() (s int) {
	s = 1 + 15 + z.AccountAddress.Msgsize() + 12 + z.RequestHash.Msgsize() + 7
	if z.Signee == nil {
		s += msgp.NilSize
	} else {
		s += z.Signee.Msgsize()
	}
	s += 10
	if z.Signature == nil {
		s += msgp.NilSize
	} else {
		s += z.Signature.Msgsize()
	}
	return
}

// MarshalHash marshals for hash
func (z *Block) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	o = append(o, 0x82, 0x82)
	if oTemp, err := z.SignedHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x82)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxBillings)))
	for za0001 := range z.TxBillings {
		if z.TxBillings[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.TxBillings[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 13 + z.SignedHeader.Msgsize() + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.TxBillings {
		if z.TxBillings[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.TxBillings[za0001].Msgsize()
		}
	}
	return
}

// MarshalHash marshals for hash
func (z *Header) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	o = append(o, 0x85, 0x85)
	o = msgp.AppendInt32(o, z.Version)
	o = append(o, 0x85)
	if oTemp, err := z.Producer.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x85)
	if oTemp, err := z.MerkleRoot.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x85)
	if oTemp, err := z.ParentHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x85)
	o = msgp.AppendTime(o, z.Timestamp)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Header) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int32Size + 9 + z.Producer.Msgsize() + 11 + z.MerkleRoot.Msgsize() + 11 + z.ParentHash.Msgsize() + 10 + msgp.TimeSize
	return
}

// MarshalHash marshals for hash
func (z *SignedHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84, 0x84)
	if oTemp, err := z.Header.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if oTemp, err := z.BlockHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x84)
	if z.Signee == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signee.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x84)
	if z.Signature == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signature.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedHeader) Msgsize() (s int) {
	s = 1 + 7 + z.Header.Msgsize() + 10 + z.BlockHash.Msgsize() + 7
	if z.Signee == nil {
		s += msgp.NilSize
	} else {
		s += z.Signee.Msgsize()
	}
	s += 10
	if z.Signature == nil {
		s += msgp.NilSize
	} else {
		s += z.Signature.Msgsize()
	}
	return
}

// MarshalHash marshals for hash
func (z *TxBilling) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	o = append(o, 0x87, 0x87)
	if oTemp, err := z.TxContent.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x87)
	o = msgp.AppendByte(o, z.TxType)
	o = append(o, 0x87)
	if z.AccountAddress == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.AccountAddress.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x87)
	if z.TxHash == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.TxHash.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x87)
	if z.Signee == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signee.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x87)
	if z.Signature == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.Signature.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x87)
	if z.SignedBlock == nil {
		o = msgp.AppendNil(o)
	} else {
		if oTemp, err := z.SignedBlock.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = msgp.AppendBytes(o, oTemp)
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxBilling) Msgsize() (s int) {
	s = 1 + 10 + z.TxContent.Msgsize() + 7 + msgp.ByteSize + 15
	if z.AccountAddress == nil {
		s += msgp.NilSize
	} else {
		s += z.AccountAddress.Msgsize()
	}
	s += 7
	if z.TxHash == nil {
		s += msgp.NilSize
	} else {
		s += z.TxHash.Msgsize()
	}
	s += 7
	if z.Signee == nil {
		s += msgp.NilSize
	} else {
		s += z.Signee.Msgsize()
	}
	s += 10
	if z.Signature == nil {
		s += msgp.NilSize
	} else {
		s += z.Signature.Msgsize()
	}
	s += 12
	if z.SignedBlock == nil {
		s += msgp.NilSize
	} else {
		s += z.SignedBlock.Msgsize()
	}
	return
}

// MarshalHash marshals for hash
func (z *TxContent) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	o = append(o, 0x86, 0x86)
	o = msgp.AppendUint32(o, z.SequenceID)
	o = append(o, 0x86)
	if oTemp, err := z.BillingRequest.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x86)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Receivers)))
	for za0001 := range z.Receivers {
		if z.Receivers[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			if oTemp, err := z.Receivers[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = msgp.AppendBytes(o, oTemp)
			}
		}
	}
	o = append(o, 0x86)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Fees)))
	for za0002 := range z.Fees {
		o = msgp.AppendUint64(o, z.Fees[za0002])
	}
	o = append(o, 0x86)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rewards)))
	for za0003 := range z.Rewards {
		o = msgp.AppendUint64(o, z.Rewards[za0003])
	}
	o = append(o, 0x86)
	if oTemp, err := z.BillingResponse.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = msgp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxContent) Msgsize() (s int) {
	s = 1 + 11 + msgp.Uint32Size + 15 + z.BillingRequest.Msgsize() + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Receivers {
		if z.Receivers[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Receivers[za0001].Msgsize()
		}
	}
	s += 5 + msgp.ArrayHeaderSize + (len(z.Fees) * (msgp.Uint64Size)) + 8 + msgp.ArrayHeaderSize + (len(z.Rewards) * (msgp.Uint64Size)) + 16 + z.BillingResponse.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z TxType) MarshalHash() (o []byte, err error) {
	var b []byte
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxType) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
