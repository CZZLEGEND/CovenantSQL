// Code generated by codecgen - DO NOT EDIT.

package types

import (
	pkg5_elliptic "crypto/elliptic"
	"errors"
	pkg2_interfaces "github.com/CovenantSQL/CovenantSQL/blockproducer/interfaces"
	pkg4_asymmetric "github.com/CovenantSQL/CovenantSQL/crypto/asymmetric"
	pkg3_hash "github.com/CovenantSQL/CovenantSQL/crypto/hash"
	pkg1_proto "github.com/CovenantSQL/CovenantSQL/proto"
	codec1978 "github.com/ugorji/go/codec"
	pkg6_big "math/big"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF86622 = 1
	codecSelferCcRAW6622  = 0
	// ----- value types used ----
	codecSelferValueTypeArray6622  = 10
	codecSelferValueTypeMap6622    = 9
	codecSelferValueTypeString6622 = 6
	codecSelferValueTypeInt6622    = 2
	codecSelferValueTypeUint6622   = 3
	codecSelferValueTypeFloat6622  = 4
	codecSelferBitsize6622         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct6622 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer6622 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg5_elliptic.Curve
		var v1 pkg2_interfaces.AccountNonce
		var v2 pkg4_asymmetric.PublicKey
		var v3 pkg3_hash.Hash
		var v4 pkg1_proto.AccountAddress
		var v5 pkg6_big.Int
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x SQLChainRole) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *SQLChainRole) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (SQLChainRole)(z.C.UintV(r.DecodeUint64(), 8))
	}
}

func (x UserPermission) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeInt(int64(x))
	}
}

func (x *UserPermission) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (UserPermission)(z.C.IntV(r.DecodeInt64(), 32))
	}
}

func (x *SQLChainUser) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Address
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Address`)
				r.WriteMapElemValue()
				yy6 := &x.Address
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.Permission.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Permission`)
				r.WriteMapElemValue()
				x.Permission.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SQLChainUser) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *SQLChainUser) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Address":
			if r.TryDecodeAsNil() {
				x.Address = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Address)); yyxt5 != nil {
					z.DecExtension(x.Address, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
				}
			}
		case "Permission":
			if r.TryDecodeAsNil() {
				x.Permission = 0
			} else {
				x.Permission.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SQLChainUser) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Address = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt9 := z.Extension(z.I2Rtid(x.Address)); yyxt9 != nil {
			z.DecExtension(x.Address, yyxt9)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Permission = 0
	} else {
		x.Permission.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SQLChainProfile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.ID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `ID`)
				r.WriteMapElemValue()
				yysf5 := &x.ID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Deposit))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Deposit`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Deposit))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.Owner
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy10), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Owner`)
				r.WriteMapElemValue()
				yy12 := &x.Owner
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy12), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Miners == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceproto_AccountAddress(([]pkg1_proto.AccountAddress)(x.Miners), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Miners`)
				r.WriteMapElemValue()
				if x.Miners == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceproto_AccountAddress(([]pkg1_proto.AccountAddress)(x.Miners), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Users == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoSQLChainUser(([]*SQLChainUser)(x.Users), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Users`)
				r.WriteMapElemValue()
				if x.Users == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoSQLChainUser(([]*SQLChainUser)(x.Users), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SQLChainProfile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *SQLChainProfile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID.CodecDecodeSelf(d)
			}
		case "Deposit":
			if r.TryDecodeAsNil() {
				x.Deposit = 0
			} else {
				x.Deposit = (uint64)(r.DecodeUint64())
			}
		case "Owner":
			if r.TryDecodeAsNil() {
				x.Owner = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Owner)); yyxt7 != nil {
					z.DecExtension(x.Owner, yyxt7)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
				}
			}
		case "Miners":
			if r.TryDecodeAsNil() {
				x.Miners = nil
			} else {
				if false {
				} else {
					h.decSliceproto_AccountAddress((*[]pkg1_proto.AccountAddress)(&x.Miners), d)
				}
			}
		case "Users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoSQLChainUser((*[]*SQLChainUser)(&x.Users), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SQLChainProfile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Deposit = 0
	} else {
		x.Deposit = (uint64)(r.DecodeUint64())
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Owner = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Owner)); yyxt16 != nil {
			z.DecExtension(x.Owner, yyxt16)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Miners = nil
	} else {
		if false {
		} else {
			h.decSliceproto_AccountAddress((*[]pkg1_proto.AccountAddress)(&x.Miners), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoSQLChainUser((*[]*SQLChainUser)(&x.Users), d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Account) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Address
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Address`)
				r.WriteMapElemValue()
				yy6 := &x.Address
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.StableCoinBalance))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `StableCoinBalance`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.StableCoinBalance))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.CovenantCoinBalance))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `CovenantCoinBalance`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.CovenantCoinBalance))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Rating))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Rating`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Rating))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt18 != nil {
					z.EncExtension(x.NextNonce, yyxt18)
				} else {
					r.EncodeUint(uint64(x.NextNonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `NextNonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt19 != nil {
					z.EncExtension(x.NextNonce, yyxt19)
				} else {
					r.EncodeUint(uint64(x.NextNonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Account) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *Account) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Address":
			if r.TryDecodeAsNil() {
				x.Address = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Address)); yyxt5 != nil {
					z.DecExtension(x.Address, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
				}
			}
		case "StableCoinBalance":
			if r.TryDecodeAsNil() {
				x.StableCoinBalance = 0
			} else {
				x.StableCoinBalance = (uint64)(r.DecodeUint64())
			}
		case "CovenantCoinBalance":
			if r.TryDecodeAsNil() {
				x.CovenantCoinBalance = 0
			} else {
				x.CovenantCoinBalance = (uint64)(r.DecodeUint64())
			}
		case "Rating":
			if r.TryDecodeAsNil() {
				x.Rating = 0
			} else {
				x.Rating = (float64)(r.DecodeFloat64())
			}
		case "NextNonce":
			if r.TryDecodeAsNil() {
				x.NextNonce = 0
			} else {
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt10 != nil {
					z.DecExtension(x.NextNonce, yyxt10)
				} else {
					x.NextNonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Account) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Address = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt13 := z.Extension(z.I2Rtid(x.Address)); yyxt13 != nil {
			z.DecExtension(x.Address, yyxt13)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.StableCoinBalance = 0
	} else {
		x.StableCoinBalance = (uint64)(r.DecodeUint64())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CovenantCoinBalance = 0
	} else {
		x.CovenantCoinBalance = (uint64)(r.DecodeUint64())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Rating = 0
	} else {
		x.Rating = (float64)(r.DecodeFloat64())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NextNonce = 0
	} else {
		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt18 != nil {
			z.DecExtension(x.NextNonce, yyxt18)
		} else {
			x.NextNonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BaseAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Address
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Address`)
				r.WriteMapElemValue()
				yy6 := &x.Address
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.StableCoinBalance))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `StableCoinBalance`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.StableCoinBalance))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.CovenantCoinBalance))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `CovenantCoinBalance`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.CovenantCoinBalance))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Rating))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Rating`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Rating))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt18 != nil {
					z.EncExtension(x.NextNonce, yyxt18)
				} else {
					r.EncodeUint(uint64(x.NextNonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `NextNonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt19 != nil {
					z.EncExtension(x.NextNonce, yyxt19)
				} else {
					r.EncodeUint(uint64(x.NextNonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt21 := z.Extension(z.I2Rtid(x.TxType)); yyxt21 != nil {
					z.EncExtension(x.TxType, yyxt21)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `TxType`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt22 := z.Extension(z.I2Rtid(x.TxType)); yyxt22 != nil {
					z.EncExtension(x.TxType, yyxt22)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BaseAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *BaseAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Address":
			if r.TryDecodeAsNil() {
				x.Account.Address = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Address)); yyxt5 != nil {
					z.DecExtension(x.Address, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
				}
			}
		case "StableCoinBalance":
			if r.TryDecodeAsNil() {
				x.Account.StableCoinBalance = 0
			} else {
				x.StableCoinBalance = (uint64)(r.DecodeUint64())
			}
		case "CovenantCoinBalance":
			if r.TryDecodeAsNil() {
				x.Account.CovenantCoinBalance = 0
			} else {
				x.CovenantCoinBalance = (uint64)(r.DecodeUint64())
			}
		case "Rating":
			if r.TryDecodeAsNil() {
				x.Account.Rating = 0
			} else {
				x.Rating = (float64)(r.DecodeFloat64())
			}
		case "NextNonce":
			if r.TryDecodeAsNil() {
				x.Account.NextNonce = 0
			} else {
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt10 != nil {
					z.DecExtension(x.NextNonce, yyxt10)
				} else {
					x.NextNonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "TxType":
			if r.TryDecodeAsNil() {
				x.TransactionTypeMixin.TxType = 0
			} else {
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(x.TxType)); yyxt12 != nil {
					z.DecExtension(x.TxType, yyxt12)
				} else {
					x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BaseAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Account.Address = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.Address)); yyxt15 != nil {
			z.DecExtension(x.Address, yyxt15)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Address), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Account.StableCoinBalance = 0
	} else {
		x.StableCoinBalance = (uint64)(r.DecodeUint64())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Account.CovenantCoinBalance = 0
	} else {
		x.CovenantCoinBalance = (uint64)(r.DecodeUint64())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Account.Rating = 0
	} else {
		x.Rating = (float64)(r.DecodeFloat64())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Account.NextNonce = 0
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.NextNonce)); yyxt20 != nil {
			z.DecExtension(x.NextNonce, yyxt20)
		} else {
			x.NextNonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionTypeMixin.TxType = 0
	} else {
		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.TxType)); yyxt22 != nil {
			z.DecExtension(x.TxType, yyxt22)
		} else {
			x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BillingHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Nonce)); yyxt4 != nil {
					z.EncExtension(x.Nonce, yyxt4)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Nonce)); yyxt5 != nil {
					z.EncExtension(x.Nonce, yyxt5)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.BillingRequest
				yy7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `BillingRequest`)
				r.WriteMapElemValue()
				yy9 := &x.BillingRequest
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy12 := &x.Producer
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy12), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Producer`)
				r.WriteMapElemValue()
				yy14 := &x.Producer
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(yy14)); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy14), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Receivers == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AccountAddress(([]*pkg1_proto.AccountAddress)(x.Receivers), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Receivers`)
				r.WriteMapElemValue()
				if x.Receivers == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AccountAddress(([]*pkg1_proto.AccountAddress)(x.Receivers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Fees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Fees, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Fees`)
				r.WriteMapElemValue()
				if x.Fees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Fees, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Rewards == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Rewards, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Rewards`)
				r.WriteMapElemValue()
				if x.Rewards == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Rewards, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BillingHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *BillingHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.Nonce = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Nonce)); yyxt5 != nil {
					z.DecExtension(x.Nonce, yyxt5)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "BillingRequest":
			if r.TryDecodeAsNil() {
				x.BillingRequest = BillingRequest{}
			} else {
				x.BillingRequest.CodecDecodeSelf(d)
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.Producer = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Producer)); yyxt8 != nil {
					z.DecExtension(x.Producer, yyxt8)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
				}
			}
		case "Receivers":
			if r.TryDecodeAsNil() {
				x.Receivers = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoproto_AccountAddress((*[]*pkg1_proto.AccountAddress)(&x.Receivers), d)
				}
			}
		case "Fees":
			if r.TryDecodeAsNil() {
				x.Fees = nil
			} else {
				if false {
				} else {
					z.F.DecSliceUint64X(&x.Fees, d)
				}
			}
		case "Rewards":
			if r.TryDecodeAsNil() {
				x.Rewards = nil
			} else {
				if false {
				} else {
					z.F.DecSliceUint64X(&x.Rewards, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BillingHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Nonce = 0
	} else {
		if false {
		} else if yyxt17 := z.Extension(z.I2Rtid(x.Nonce)); yyxt17 != nil {
			z.DecExtension(x.Nonce, yyxt17)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingRequest = BillingRequest{}
	} else {
		x.BillingRequest.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Producer = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Producer)); yyxt20 != nil {
			z.DecExtension(x.Producer, yyxt20)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Receivers = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoproto_AccountAddress((*[]*pkg1_proto.AccountAddress)(&x.Receivers), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Fees = nil
	} else {
		if false {
		} else {
			z.F.DecSliceUint64X(&x.Fees, d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Rewards = nil
	} else {
		if false {
		} else {
			z.F.DecSliceUint64X(&x.Rewards, d)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Billing) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(10)
			} else {
				r.WriteMapStart(10)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.Nonce)); yyxt4 != nil {
					z.EncExtension(x.Nonce, yyxt4)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Nonce)); yyxt5 != nil {
					z.EncExtension(x.Nonce, yyxt5)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.BillingRequest
				yy7.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `BillingRequest`)
				r.WriteMapElemValue()
				yy9 := &x.BillingRequest
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy12 := &x.Producer
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy12), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Producer`)
				r.WriteMapElemValue()
				yy14 := &x.Producer
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(yy14)); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy14), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Receivers == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AccountAddress(([]*pkg1_proto.AccountAddress)(x.Receivers), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Receivers`)
				r.WriteMapElemValue()
				if x.Receivers == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AccountAddress(([]*pkg1_proto.AccountAddress)(x.Receivers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Fees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Fees, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Fees`)
				r.WriteMapElemValue()
				if x.Fees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Fees, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Rewards == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Rewards, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Rewards`)
				r.WriteMapElemValue()
				if x.Rewards == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceUint64V(x.Rewards, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt26 := z.Extension(z.I2Rtid(x.TxType)); yyxt26 != nil {
					z.EncExtension(x.TxType, yyxt26)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `TxType`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt27 := z.Extension(z.I2Rtid(x.TxType)); yyxt27 != nil {
					z.EncExtension(x.TxType, yyxt27)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy29 := &x.Hash
				if false {
				} else if yyxt30 := z.Extension(z.I2Rtid(yy29)); yyxt30 != nil {
					z.EncExtension(yy29, yyxt30)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy29), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Hash`)
				r.WriteMapElemValue()
				yy31 := &x.Hash
				if false {
				} else if yyxt32 := z.Extension(z.I2Rtid(yy31)); yyxt32 != nil {
					z.EncExtension(yy31, yyxt32)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy31), e)
				}
			}
			var yyn33 bool
			if x.DefaultHashSignVerifierImpl.Signee == nil {
				yyn33 = true
				goto LABEL33
			}
		LABEL33:
			if yyr2 || yy2arr2 {
				if yyn33 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt34 := z.Extension(z.I2Rtid(x.Signee)); yyxt34 != nil {
							z.EncExtension(x.Signee, yyxt34)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signee`)
				r.WriteMapElemValue()
				if yyn33 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt35 := z.Extension(z.I2Rtid(x.Signee)); yyxt35 != nil {
							z.EncExtension(x.Signee, yyxt35)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn36 bool
			if x.DefaultHashSignVerifierImpl.Signature == nil {
				yyn36 = true
				goto LABEL36
			}
		LABEL36:
			if yyr2 || yy2arr2 {
				if yyn36 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt37 := z.Extension(z.I2Rtid(x.Signature)); yyxt37 != nil {
							z.EncExtension(x.Signature, yyxt37)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signature`)
				r.WriteMapElemValue()
				if yyn36 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt38 := z.Extension(z.I2Rtid(x.Signature)); yyxt38 != nil {
							z.EncExtension(x.Signature, yyxt38)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Billing) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *Billing) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.BillingHeader.Nonce = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Nonce)); yyxt5 != nil {
					z.DecExtension(x.Nonce, yyxt5)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "BillingRequest":
			if r.TryDecodeAsNil() {
				x.BillingHeader.BillingRequest = BillingRequest{}
			} else {
				x.BillingRequest.CodecDecodeSelf(d)
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.BillingHeader.Producer = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.Producer)); yyxt8 != nil {
					z.DecExtension(x.Producer, yyxt8)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
				}
			}
		case "Receivers":
			if r.TryDecodeAsNil() {
				x.BillingHeader.Receivers = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoproto_AccountAddress((*[]*pkg1_proto.AccountAddress)(&x.Receivers), d)
				}
			}
		case "Fees":
			if r.TryDecodeAsNil() {
				x.BillingHeader.Fees = nil
			} else {
				if false {
				} else {
					z.F.DecSliceUint64X(&x.Fees, d)
				}
			}
		case "Rewards":
			if r.TryDecodeAsNil() {
				x.BillingHeader.Rewards = nil
			} else {
				if false {
				} else {
					z.F.DecSliceUint64X(&x.Rewards, d)
				}
			}
		case "TxType":
			if r.TryDecodeAsNil() {
				x.TransactionTypeMixin.TxType = 0
			} else {
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(x.TxType)); yyxt16 != nil {
					z.DecExtension(x.TxType, yyxt16)
				} else {
					x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.Hash)); yyxt18 != nil {
					z.DecExtension(x.Hash, yyxt18)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signee != nil {
					x.DefaultHashSignVerifierImpl.Signee = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signee == nil {
					x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt20 := z.Extension(z.I2Rtid(x.Signee)); yyxt20 != nil {
					z.DecExtension(x.Signee, yyxt20)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signature != nil {
					x.DefaultHashSignVerifierImpl.Signature = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signature == nil {
					x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt22 := z.Extension(z.I2Rtid(x.Signature)); yyxt22 != nil {
					z.DecExtension(x.Signature, yyxt22)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Billing) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj23 int
	var yyb23 bool
	var yyhl23 bool = l >= 0
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.Nonce = 0
	} else {
		if false {
		} else if yyxt25 := z.Extension(z.I2Rtid(x.Nonce)); yyxt25 != nil {
			z.DecExtension(x.Nonce, yyxt25)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.BillingRequest = BillingRequest{}
	} else {
		x.BillingRequest.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.Producer = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.Producer)); yyxt28 != nil {
			z.DecExtension(x.Producer, yyxt28)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.Receivers = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoproto_AccountAddress((*[]*pkg1_proto.AccountAddress)(&x.Receivers), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.Fees = nil
	} else {
		if false {
		} else {
			z.F.DecSliceUint64X(&x.Fees, d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BillingHeader.Rewards = nil
	} else {
		if false {
		} else {
			z.F.DecSliceUint64X(&x.Rewards, d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionTypeMixin.TxType = 0
	} else {
		if false {
		} else if yyxt36 := z.Extension(z.I2Rtid(x.TxType)); yyxt36 != nil {
			z.DecExtension(x.TxType, yyxt36)
		} else {
			x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt38 := z.Extension(z.I2Rtid(x.Hash)); yyxt38 != nil {
			z.DecExtension(x.Hash, yyxt38)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signee != nil {
			x.DefaultHashSignVerifierImpl.Signee = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signee == nil {
			x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt40 := z.Extension(z.I2Rtid(x.Signee)); yyxt40 != nil {
			z.DecExtension(x.Signee, yyxt40)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signature != nil {
			x.DefaultHashSignVerifierImpl.Signature = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signature == nil {
			x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt42 := z.Extension(z.I2Rtid(x.Signature)); yyxt42 != nil {
			z.DecExtension(x.Signature, yyxt42)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj23++
		if yyhl23 {
			yyb23 = yyj23 > l
		} else {
			yyb23 = r.CheckBreak()
		}
		if yyb23 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj23-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BillingRequestHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yysf4 := &x.DatabaseID
				yysf4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `DatabaseID`)
				r.WriteMapElemValue()
				yysf5 := &x.DatabaseID
				yysf5.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.LowBlock
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(yy7)); yyxt8 != nil {
					z.EncExtension(yy7, yyxt8)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy7), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `LowBlock`)
				r.WriteMapElemValue()
				yy9 := &x.LowBlock
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy9), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.LowHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `LowHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.LowHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.HighBlock
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `HighBlock`)
				r.WriteMapElemValue()
				yy17 := &x.HighBlock
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy17), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.HighHeight))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `HighHeight`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.HighHeight))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.GasAmounts == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AddrAndGas(([]*pkg1_proto.AddrAndGas)(x.GasAmounts), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `GasAmounts`)
				r.WriteMapElemValue()
				if x.GasAmounts == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoproto_AddrAndGas(([]*pkg1_proto.AddrAndGas)(x.GasAmounts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BillingRequestHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *BillingRequestHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "DatabaseID":
			if r.TryDecodeAsNil() {
				x.DatabaseID = ""
			} else {
				x.DatabaseID.CodecDecodeSelf(d)
			}
		case "LowBlock":
			if r.TryDecodeAsNil() {
				x.LowBlock = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.LowBlock)); yyxt6 != nil {
					z.DecExtension(x.LowBlock, yyxt6)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.LowBlock), d)
				}
			}
		case "LowHeight":
			if r.TryDecodeAsNil() {
				x.LowHeight = 0
			} else {
				x.LowHeight = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "HighBlock":
			if r.TryDecodeAsNil() {
				x.HighBlock = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.HighBlock)); yyxt9 != nil {
					z.DecExtension(x.HighBlock, yyxt9)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.HighBlock), d)
				}
			}
		case "HighHeight":
			if r.TryDecodeAsNil() {
				x.HighHeight = 0
			} else {
				x.HighHeight = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "GasAmounts":
			if r.TryDecodeAsNil() {
				x.GasAmounts = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoproto_AddrAndGas((*[]*pkg1_proto.AddrAndGas)(&x.GasAmounts), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BillingRequestHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DatabaseID = ""
	} else {
		x.DatabaseID.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LowBlock = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.LowBlock)); yyxt16 != nil {
			z.DecExtension(x.LowBlock, yyxt16)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.LowBlock), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.LowHeight = 0
	} else {
		x.LowHeight = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HighBlock = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt19 := z.Extension(z.I2Rtid(x.HighBlock)); yyxt19 != nil {
			z.DecExtension(x.HighBlock, yyxt19)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.HighBlock), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.HighHeight = 0
	} else {
		x.HighHeight = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GasAmounts = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoproto_AddrAndGas((*[]*pkg1_proto.AddrAndGas)(&x.GasAmounts), d)
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BillingRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Header
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Header`)
				r.WriteMapElemValue()
				yy6 := &x.Header
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.RequestHash
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy9), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `RequestHash`)
				r.WriteMapElemValue()
				yy11 := &x.RequestHash
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(yy11)); yyxt12 != nil {
					z.EncExtension(yy11, yyxt12)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy11), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Signees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoasymmetric_PublicKey(([]*pkg4_asymmetric.PublicKey)(x.Signees), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signees`)
				r.WriteMapElemValue()
				if x.Signees == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoasymmetric_PublicKey(([]*pkg4_asymmetric.PublicKey)(x.Signees), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Signatures == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoasymmetric_Signature(([]*pkg4_asymmetric.Signature)(x.Signatures), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signatures`)
				r.WriteMapElemValue()
				if x.Signatures == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoasymmetric_Signature(([]*pkg4_asymmetric.Signature)(x.Signatures), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BillingRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *BillingRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = BillingRequestHeader{}
			} else {
				x.Header.CodecDecodeSelf(d)
			}
		case "RequestHash":
			if r.TryDecodeAsNil() {
				x.RequestHash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.RequestHash)); yyxt6 != nil {
					z.DecExtension(x.RequestHash, yyxt6)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.RequestHash), d)
				}
			}
		case "Signees":
			if r.TryDecodeAsNil() {
				x.Signees = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoasymmetric_PublicKey((*[]*pkg4_asymmetric.PublicKey)(&x.Signees), d)
				}
			}
		case "Signatures":
			if r.TryDecodeAsNil() {
				x.Signatures = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoasymmetric_Signature((*[]*pkg4_asymmetric.Signature)(&x.Signatures), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BillingRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header = BillingRequestHeader{}
	} else {
		x.Header.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RequestHash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.RequestHash)); yyxt14 != nil {
			z.DecExtension(x.RequestHash, yyxt14)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.RequestHash), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Signees = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoasymmetric_PublicKey((*[]*pkg4_asymmetric.PublicKey)(&x.Signees), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Signatures = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoasymmetric_Signature((*[]*pkg4_asymmetric.Signature)(&x.Signatures), d)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Header) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				r.WriteMapStart(5)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Version`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.Producer
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(yy7)); yyxt8 != nil {
					z.EncExtension(yy7, yyxt8)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy7), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Producer`)
				r.WriteMapElemValue()
				yy9 := &x.Producer
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy9), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy12 := &x.MerkleRoot
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy12), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `MerkleRoot`)
				r.WriteMapElemValue()
				yy14 := &x.MerkleRoot
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(yy14)); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy14), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy17 := &x.ParentHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy17), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `ParentHash`)
				r.WriteMapElemValue()
				yy19 := &x.ParentHash
				if false {
				} else if yyxt20 := z.Extension(z.I2Rtid(yy19)); yyxt20 != nil {
					z.EncExtension(yy19, yyxt20)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy19), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Header) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *Header) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Version":
			if r.TryDecodeAsNil() {
				x.Version = 0
			} else {
				x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.Producer = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.Producer)); yyxt6 != nil {
					z.DecExtension(x.Producer, yyxt6)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
				}
			}
		case "MerkleRoot":
			if r.TryDecodeAsNil() {
				x.MerkleRoot = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt8 != nil {
					z.DecExtension(x.MerkleRoot, yyxt8)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.MerkleRoot), d)
				}
			}
		case "ParentHash":
			if r.TryDecodeAsNil() {
				x.ParentHash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt10 != nil {
					z.DecExtension(x.ParentHash, yyxt10)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.ParentHash), d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Header) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = 0
	} else {
		x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Producer = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Producer)); yyxt16 != nil {
			z.DecExtension(x.Producer, yyxt16)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MerkleRoot = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt18 != nil {
			z.DecExtension(x.MerkleRoot, yyxt18)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.MerkleRoot), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ParentHash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt20 != nil {
			z.DecExtension(x.ParentHash, yyxt20)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.ParentHash), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SignedHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Version`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy7 := &x.Producer
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(yy7)); yyxt8 != nil {
					z.EncExtension(yy7, yyxt8)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy7), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Producer`)
				r.WriteMapElemValue()
				yy9 := &x.Producer
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy9), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy12 := &x.MerkleRoot
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy12), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `MerkleRoot`)
				r.WriteMapElemValue()
				yy14 := &x.MerkleRoot
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(yy14)); yyxt15 != nil {
					z.EncExtension(yy14, yyxt15)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy14), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy17 := &x.ParentHash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy17), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `ParentHash`)
				r.WriteMapElemValue()
				yy19 := &x.ParentHash
				if false {
				} else if yyxt20 := z.Extension(z.I2Rtid(yy19)); yyxt20 != nil {
					z.EncExtension(yy19, yyxt20)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy19), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Timestamp`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Timestamp)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy25 := &x.BlockHash
				if false {
				} else if yyxt26 := z.Extension(z.I2Rtid(yy25)); yyxt26 != nil {
					z.EncExtension(yy25, yyxt26)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy25), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `BlockHash`)
				r.WriteMapElemValue()
				yy27 := &x.BlockHash
				if false {
				} else if yyxt28 := z.Extension(z.I2Rtid(yy27)); yyxt28 != nil {
					z.EncExtension(yy27, yyxt28)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy27), e)
				}
			}
			var yyn29 bool
			if x.Signee == nil {
				yyn29 = true
				goto LABEL29
			}
		LABEL29:
			if yyr2 || yy2arr2 {
				if yyn29 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt30 := z.Extension(z.I2Rtid(x.Signee)); yyxt30 != nil {
							z.EncExtension(x.Signee, yyxt30)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signee`)
				r.WriteMapElemValue()
				if yyn29 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt31 := z.Extension(z.I2Rtid(x.Signee)); yyxt31 != nil {
							z.EncExtension(x.Signee, yyxt31)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn32 bool
			if x.Signature == nil {
				yyn32 = true
				goto LABEL32
			}
		LABEL32:
			if yyr2 || yy2arr2 {
				if yyn32 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt33 := z.Extension(z.I2Rtid(x.Signature)); yyxt33 != nil {
							z.EncExtension(x.Signature, yyxt33)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signature`)
				r.WriteMapElemValue()
				if yyn32 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt34 := z.Extension(z.I2Rtid(x.Signature)); yyxt34 != nil {
							z.EncExtension(x.Signature, yyxt34)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SignedHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *SignedHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Version":
			if r.TryDecodeAsNil() {
				x.Header.Version = 0
			} else {
				x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "Producer":
			if r.TryDecodeAsNil() {
				x.Header.Producer = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.Producer)); yyxt6 != nil {
					z.DecExtension(x.Producer, yyxt6)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
				}
			}
		case "MerkleRoot":
			if r.TryDecodeAsNil() {
				x.Header.MerkleRoot = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt8 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt8 != nil {
					z.DecExtension(x.MerkleRoot, yyxt8)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.MerkleRoot), d)
				}
			}
		case "ParentHash":
			if r.TryDecodeAsNil() {
				x.Header.ParentHash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt10 != nil {
					z.DecExtension(x.ParentHash, yyxt10)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.ParentHash), d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Header.Timestamp = time.Time{}
			} else {
				if false {
				} else {
					x.Timestamp = r.DecodeTime()
				}
			}
		case "BlockHash":
			if r.TryDecodeAsNil() {
				x.BlockHash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.BlockHash)); yyxt14 != nil {
					z.DecExtension(x.BlockHash, yyxt14)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.BlockHash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(x.Signee)); yyxt16 != nil {
					z.DecExtension(x.Signee, yyxt16)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.Signature)); yyxt18 != nil {
					z.DecExtension(x.Signature, yyxt18)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SignedHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Version = 0
	} else {
		x.Version = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Producer = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.Producer)); yyxt22 != nil {
			z.DecExtension(x.Producer, yyxt22)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Producer), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.MerkleRoot = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.MerkleRoot)); yyxt24 != nil {
			z.DecExtension(x.MerkleRoot, yyxt24)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.MerkleRoot), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.ParentHash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt26 := z.Extension(z.I2Rtid(x.ParentHash)); yyxt26 != nil {
			z.DecExtension(x.ParentHash, yyxt26)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.ParentHash), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Header.Timestamp = time.Time{}
	} else {
		if false {
		} else {
			x.Timestamp = r.DecodeTime()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BlockHash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt30 := z.Extension(z.I2Rtid(x.BlockHash)); yyxt30 != nil {
			z.DecExtension(x.BlockHash, yyxt30)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.BlockHash), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.Signee)); yyxt32 != nil {
			z.DecExtension(x.Signee, yyxt32)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt34 := z.Extension(z.I2Rtid(x.Signature)); yyxt34 != nil {
			z.DecExtension(x.Signature, yyxt34)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Block) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.SignedHeader
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `SignedHeader`)
				r.WriteMapElemValue()
				yy6 := &x.SignedHeader
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceinterfaces_Transaction(([]pkg2_interfaces.Transaction)(x.Transactions), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Transactions`)
				r.WriteMapElemValue()
				if x.Transactions == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceinterfaces_Transaction(([]pkg2_interfaces.Transaction)(x.Transactions), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Block) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *Block) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "SignedHeader":
			if r.TryDecodeAsNil() {
				x.SignedHeader = SignedHeader{}
			} else {
				x.SignedHeader.CodecDecodeSelf(d)
			}
		case "Transactions":
			if r.TryDecodeAsNil() {
				x.Transactions = nil
			} else {
				if false {
				} else {
					h.decSliceinterfaces_Transaction((*[]pkg2_interfaces.Transaction)(&x.Transactions), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Block) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SignedHeader = SignedHeader{}
	} else {
		x.SignedHeader.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Transactions = nil
	} else {
		if false {
		} else {
			h.decSliceinterfaces_Transaction((*[]pkg2_interfaces.Transaction)(&x.Transactions), d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DefaultHashSignVerifierImpl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Hash
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Hash`)
				r.WriteMapElemValue()
				yy6 := &x.Hash
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy6), e)
				}
			}
			var yyn8 bool
			if x.Signee == nil {
				yyn8 = true
				goto LABEL8
			}
		LABEL8:
			if yyr2 || yy2arr2 {
				if yyn8 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt9 := z.Extension(z.I2Rtid(x.Signee)); yyxt9 != nil {
							z.EncExtension(x.Signee, yyxt9)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signee`)
				r.WriteMapElemValue()
				if yyn8 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt10 := z.Extension(z.I2Rtid(x.Signee)); yyxt10 != nil {
							z.EncExtension(x.Signee, yyxt10)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn11 bool
			if x.Signature == nil {
				yyn11 = true
				goto LABEL11
			}
		LABEL11:
			if yyr2 || yy2arr2 {
				if yyn11 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt12 := z.Extension(z.I2Rtid(x.Signature)); yyxt12 != nil {
							z.EncExtension(x.Signature, yyxt12)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signature`)
				r.WriteMapElemValue()
				if yyn11 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt13 := z.Extension(z.I2Rtid(x.Signature)); yyxt13 != nil {
							z.EncExtension(x.Signature, yyxt13)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DefaultHashSignVerifierImpl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *DefaultHashSignVerifierImpl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Hash":
			if r.TryDecodeAsNil() {
				x.Hash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Hash)); yyxt5 != nil {
					z.DecExtension(x.Hash, yyxt5)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.Signee != nil {
					x.Signee = nil
				}
			} else {
				if x.Signee == nil {
					x.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Signee)); yyxt7 != nil {
					z.DecExtension(x.Signee, yyxt7)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.Signature != nil {
					x.Signature = nil
				}
			} else {
				if x.Signature == nil {
					x.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Signature)); yyxt9 != nil {
					z.DecExtension(x.Signature, yyxt9)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DefaultHashSignVerifierImpl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Hash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt12 := z.Extension(z.I2Rtid(x.Hash)); yyxt12 != nil {
			z.DecExtension(x.Hash, yyxt12)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signee != nil {
			x.Signee = nil
		}
	} else {
		if x.Signee == nil {
			x.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.Signee)); yyxt14 != nil {
			z.DecExtension(x.Signee, yyxt14)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Signature != nil {
			x.Signature = nil
		}
	} else {
		if x.Signature == nil {
			x.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt16 := z.Extension(z.I2Rtid(x.Signature)); yyxt16 != nil {
			z.DecExtension(x.Signature, yyxt16)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CreateDatabaseHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Owner
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Owner`)
				r.WriteMapElemValue()
				yy6 := &x.Owner
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Nonce)); yyxt9 != nil {
					z.EncExtension(x.Nonce, yyxt9)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Nonce)); yyxt10 != nil {
					z.EncExtension(x.Nonce, yyxt10)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CreateDatabaseHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *CreateDatabaseHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Owner":
			if r.TryDecodeAsNil() {
				x.Owner = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Owner)); yyxt5 != nil {
					z.DecExtension(x.Owner, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
				}
			}
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.Nonce = 0
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Nonce)); yyxt7 != nil {
					z.DecExtension(x.Nonce, yyxt7)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CreateDatabaseHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Owner = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt10 := z.Extension(z.I2Rtid(x.Owner)); yyxt10 != nil {
			z.DecExtension(x.Owner, yyxt10)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Nonce = 0
	} else {
		if false {
		} else if yyxt12 := z.Extension(z.I2Rtid(x.Nonce)); yyxt12 != nil {
			z.DecExtension(x.Nonce, yyxt12)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CreateDatabase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Owner
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Owner`)
				r.WriteMapElemValue()
				yy6 := &x.Owner
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Nonce)); yyxt9 != nil {
					z.EncExtension(x.Nonce, yyxt9)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(x.Nonce)); yyxt10 != nil {
					z.EncExtension(x.Nonce, yyxt10)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(x.TxType)); yyxt12 != nil {
					z.EncExtension(x.TxType, yyxt12)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `TxType`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.TxType)); yyxt13 != nil {
					z.EncExtension(x.TxType, yyxt13)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy15 := &x.Hash
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
					z.EncExtension(yy15, yyxt16)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy15), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Hash`)
				r.WriteMapElemValue()
				yy17 := &x.Hash
				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
					z.EncExtension(yy17, yyxt18)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy17), e)
				}
			}
			var yyn19 bool
			if x.DefaultHashSignVerifierImpl.Signee == nil {
				yyn19 = true
				goto LABEL19
			}
		LABEL19:
			if yyr2 || yy2arr2 {
				if yyn19 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt20 := z.Extension(z.I2Rtid(x.Signee)); yyxt20 != nil {
							z.EncExtension(x.Signee, yyxt20)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signee`)
				r.WriteMapElemValue()
				if yyn19 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt21 := z.Extension(z.I2Rtid(x.Signee)); yyxt21 != nil {
							z.EncExtension(x.Signee, yyxt21)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn22 bool
			if x.DefaultHashSignVerifierImpl.Signature == nil {
				yyn22 = true
				goto LABEL22
			}
		LABEL22:
			if yyr2 || yy2arr2 {
				if yyn22 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt23 := z.Extension(z.I2Rtid(x.Signature)); yyxt23 != nil {
							z.EncExtension(x.Signature, yyxt23)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signature`)
				r.WriteMapElemValue()
				if yyn22 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt24 := z.Extension(z.I2Rtid(x.Signature)); yyxt24 != nil {
							z.EncExtension(x.Signature, yyxt24)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CreateDatabase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *CreateDatabase) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Owner":
			if r.TryDecodeAsNil() {
				x.CreateDatabaseHeader.Owner = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Owner)); yyxt5 != nil {
					z.DecExtension(x.Owner, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
				}
			}
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.CreateDatabaseHeader.Nonce = 0
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Nonce)); yyxt7 != nil {
					z.DecExtension(x.Nonce, yyxt7)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "TxType":
			if r.TryDecodeAsNil() {
				x.TransactionTypeMixin.TxType = 0
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.TxType)); yyxt9 != nil {
					z.DecExtension(x.TxType, yyxt9)
				} else {
					x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Hash)); yyxt11 != nil {
					z.DecExtension(x.Hash, yyxt11)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signee != nil {
					x.DefaultHashSignVerifierImpl.Signee = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signee == nil {
					x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.Signee)); yyxt13 != nil {
					z.DecExtension(x.Signee, yyxt13)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signature != nil {
					x.DefaultHashSignVerifierImpl.Signature = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signature == nil {
					x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.Signature)); yyxt15 != nil {
					z.DecExtension(x.Signature, yyxt15)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CreateDatabase) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreateDatabaseHeader.Owner = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt18 := z.Extension(z.I2Rtid(x.Owner)); yyxt18 != nil {
			z.DecExtension(x.Owner, yyxt18)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Owner), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreateDatabaseHeader.Nonce = 0
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.Nonce)); yyxt20 != nil {
			z.DecExtension(x.Nonce, yyxt20)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionTypeMixin.TxType = 0
	} else {
		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.TxType)); yyxt22 != nil {
			z.DecExtension(x.TxType, yyxt22)
		} else {
			x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.Hash)); yyxt24 != nil {
			z.DecExtension(x.Hash, yyxt24)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signee != nil {
			x.DefaultHashSignVerifierImpl.Signee = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signee == nil {
			x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt26 := z.Extension(z.I2Rtid(x.Signee)); yyxt26 != nil {
			z.DecExtension(x.Signee, yyxt26)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signature != nil {
			x.DefaultHashSignVerifierImpl.Signature = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signature == nil {
			x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.Signature)); yyxt28 != nil {
			z.DecExtension(x.Signature, yyxt28)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	r.ReadArrayEnd()
}

func (x *TransferHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Sender
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Sender`)
				r.WriteMapElemValue()
				yy6 := &x.Sender
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.Receiver
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy9), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Receiver`)
				r.WriteMapElemValue()
				yy11 := &x.Receiver
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(yy11)); yyxt12 != nil {
					z.EncExtension(yy11, yyxt12)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy11), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.Nonce)); yyxt14 != nil {
					z.EncExtension(x.Nonce, yyxt14)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.Nonce)); yyxt15 != nil {
					z.EncExtension(x.Nonce, yyxt15)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Amount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Amount`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Amount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TransferHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *TransferHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Sender":
			if r.TryDecodeAsNil() {
				x.Sender = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Sender)); yyxt5 != nil {
					z.DecExtension(x.Sender, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Sender), d)
				}
			}
		case "Receiver":
			if r.TryDecodeAsNil() {
				x.Receiver = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Receiver)); yyxt7 != nil {
					z.DecExtension(x.Receiver, yyxt7)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Receiver), d)
				}
			}
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.Nonce = 0
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Nonce)); yyxt9 != nil {
					z.DecExtension(x.Nonce, yyxt9)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "Amount":
			if r.TryDecodeAsNil() {
				x.Amount = 0
			} else {
				x.Amount = (uint64)(r.DecodeUint64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TransferHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sender = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt13 := z.Extension(z.I2Rtid(x.Sender)); yyxt13 != nil {
			z.DecExtension(x.Sender, yyxt13)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Sender), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Receiver = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt15 := z.Extension(z.I2Rtid(x.Receiver)); yyxt15 != nil {
			z.DecExtension(x.Receiver, yyxt15)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Receiver), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Nonce = 0
	} else {
		if false {
		} else if yyxt17 := z.Extension(z.I2Rtid(x.Nonce)); yyxt17 != nil {
			z.DecExtension(x.Nonce, yyxt17)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Amount = 0
	} else {
		x.Amount = (uint64)(r.DecodeUint64())
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Transfer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.Sender
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(yy4)); yyxt5 != nil {
					z.EncExtension(yy4, yyxt5)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy4), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Sender`)
				r.WriteMapElemValue()
				yy6 := &x.Sender
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(yy6)); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy6), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.Receiver
				if false {
				} else if yyxt10 := z.Extension(z.I2Rtid(yy9)); yyxt10 != nil {
					z.EncExtension(yy9, yyxt10)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy9), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Receiver`)
				r.WriteMapElemValue()
				yy11 := &x.Receiver
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(yy11)); yyxt12 != nil {
					z.EncExtension(yy11, yyxt12)
				} else {
					h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy11), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.Nonce)); yyxt14 != nil {
					z.EncExtension(x.Nonce, yyxt14)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Nonce`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt15 := z.Extension(z.I2Rtid(x.Nonce)); yyxt15 != nil {
					z.EncExtension(x.Nonce, yyxt15)
				} else {
					r.EncodeUint(uint64(x.Nonce))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.Amount))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Amount`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.Amount))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt20 := z.Extension(z.I2Rtid(x.TxType)); yyxt20 != nil {
					z.EncExtension(x.TxType, yyxt20)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `TxType`)
				r.WriteMapElemValue()
				if false {
				} else if yyxt21 := z.Extension(z.I2Rtid(x.TxType)); yyxt21 != nil {
					z.EncExtension(x.TxType, yyxt21)
				} else {
					r.EncodeUint(uint64(x.TxType))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy23 := &x.Hash
				if false {
				} else if yyxt24 := z.Extension(z.I2Rtid(yy23)); yyxt24 != nil {
					z.EncExtension(yy23, yyxt24)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy23), e)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Hash`)
				r.WriteMapElemValue()
				yy25 := &x.Hash
				if false {
				} else if yyxt26 := z.Extension(z.I2Rtid(yy25)); yyxt26 != nil {
					z.EncExtension(yy25, yyxt26)
				} else {
					h.enchash_Hash((*pkg3_hash.Hash)(yy25), e)
				}
			}
			var yyn27 bool
			if x.DefaultHashSignVerifierImpl.Signee == nil {
				yyn27 = true
				goto LABEL27
			}
		LABEL27:
			if yyr2 || yy2arr2 {
				if yyn27 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt28 := z.Extension(z.I2Rtid(x.Signee)); yyxt28 != nil {
							z.EncExtension(x.Signee, yyxt28)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signee`)
				r.WriteMapElemValue()
				if yyn27 {
					r.EncodeNil()
				} else {
					if x.Signee == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt29 := z.Extension(z.I2Rtid(x.Signee)); yyxt29 != nil {
							z.EncExtension(x.Signee, yyxt29)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signee)
						} else {
							z.EncFallback(x.Signee)
						}
					}
				}
			}
			var yyn30 bool
			if x.DefaultHashSignVerifierImpl.Signature == nil {
				yyn30 = true
				goto LABEL30
			}
		LABEL30:
			if yyr2 || yy2arr2 {
				if yyn30 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt31 := z.Extension(z.I2Rtid(x.Signature)); yyxt31 != nil {
							z.EncExtension(x.Signature, yyxt31)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86622, `Signature`)
				r.WriteMapElemValue()
				if yyn30 {
					r.EncodeNil()
				} else {
					if x.Signature == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt32 := z.Extension(z.I2Rtid(x.Signature)); yyxt32 != nil {
							z.EncExtension(x.Signature, yyxt32)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(x.Signature)
						} else {
							z.EncFallback(x.Signature)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Transfer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6622 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6622 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6622)
		}
	}
}

func (x *Transfer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Sender":
			if r.TryDecodeAsNil() {
				x.TransferHeader.Sender = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Sender)); yyxt5 != nil {
					z.DecExtension(x.Sender, yyxt5)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Sender), d)
				}
			}
		case "Receiver":
			if r.TryDecodeAsNil() {
				x.TransferHeader.Receiver = pkg1_proto.AccountAddress{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.Receiver)); yyxt7 != nil {
					z.DecExtension(x.Receiver, yyxt7)
				} else {
					h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Receiver), d)
				}
			}
		case "Nonce":
			if r.TryDecodeAsNil() {
				x.TransferHeader.Nonce = 0
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.Nonce)); yyxt9 != nil {
					z.DecExtension(x.Nonce, yyxt9)
				} else {
					x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "Amount":
			if r.TryDecodeAsNil() {
				x.TransferHeader.Amount = 0
			} else {
				x.Amount = (uint64)(r.DecodeUint64())
			}
		case "TxType":
			if r.TryDecodeAsNil() {
				x.TransactionTypeMixin.TxType = 0
			} else {
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(x.TxType)); yyxt12 != nil {
					z.DecExtension(x.TxType, yyxt12)
				} else {
					x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
			} else {
				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.Hash)); yyxt14 != nil {
					z.DecExtension(x.Hash, yyxt14)
				} else {
					h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
				}
			}
		case "Signee":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signee != nil {
					x.DefaultHashSignVerifierImpl.Signee = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signee == nil {
					x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
				}

				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(x.Signee)); yyxt16 != nil {
					z.DecExtension(x.Signee, yyxt16)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signee)
				} else {
					z.DecFallback(x.Signee, false)
				}
			}
		case "Signature":
			if r.TryDecodeAsNil() {
				if true && x.DefaultHashSignVerifierImpl.Signature != nil {
					x.DefaultHashSignVerifierImpl.Signature = nil
				}
			} else {
				if x.DefaultHashSignVerifierImpl.Signature == nil {
					x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
				}

				if false {
				} else if yyxt18 := z.Extension(z.I2Rtid(x.Signature)); yyxt18 != nil {
					z.DecExtension(x.Signature, yyxt18)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Signature)
				} else {
					z.DecFallback(x.Signature, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Transfer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransferHeader.Sender = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt21 := z.Extension(z.I2Rtid(x.Sender)); yyxt21 != nil {
			z.DecExtension(x.Sender, yyxt21)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Sender), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransferHeader.Receiver = pkg1_proto.AccountAddress{}
	} else {
		if false {
		} else if yyxt23 := z.Extension(z.I2Rtid(x.Receiver)); yyxt23 != nil {
			z.DecExtension(x.Receiver, yyxt23)
		} else {
			h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&x.Receiver), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransferHeader.Nonce = 0
	} else {
		if false {
		} else if yyxt25 := z.Extension(z.I2Rtid(x.Nonce)); yyxt25 != nil {
			z.DecExtension(x.Nonce, yyxt25)
		} else {
			x.Nonce = (pkg2_interfaces.AccountNonce)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransferHeader.Amount = 0
	} else {
		x.Amount = (uint64)(r.DecodeUint64())
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionTypeMixin.TxType = 0
	} else {
		if false {
		} else if yyxt28 := z.Extension(z.I2Rtid(x.TxType)); yyxt28 != nil {
			z.DecExtension(x.TxType, yyxt28)
		} else {
			x.TxType = (pkg2_interfaces.TransactionType)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.DefaultHashSignVerifierImpl.Hash = pkg3_hash.Hash{}
	} else {
		if false {
		} else if yyxt30 := z.Extension(z.I2Rtid(x.Hash)); yyxt30 != nil {
			z.DecExtension(x.Hash, yyxt30)
		} else {
			h.dechash_Hash((*pkg3_hash.Hash)(&x.Hash), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signee != nil {
			x.DefaultHashSignVerifierImpl.Signee = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signee == nil {
			x.DefaultHashSignVerifierImpl.Signee = new(pkg4_asymmetric.PublicKey)
		}

		if false {
		} else if yyxt32 := z.Extension(z.I2Rtid(x.Signee)); yyxt32 != nil {
			z.DecExtension(x.Signee, yyxt32)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signee)
		} else {
			z.DecFallback(x.Signee, false)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DefaultHashSignVerifierImpl.Signature != nil {
			x.DefaultHashSignVerifierImpl.Signature = nil
		}
	} else {
		if x.DefaultHashSignVerifierImpl.Signature == nil {
			x.DefaultHashSignVerifierImpl.Signature = new(pkg4_asymmetric.Signature)
		}

		if false {
		} else if yyxt34 := z.Extension(z.I2Rtid(x.Signature)); yyxt34 != nil {
			z.DecExtension(x.Signature, yyxt34)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Signature)
		} else {
			z.DecFallback(x.Signature, false)
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer6622) encproto_AccountAddress(v *pkg1_proto.AccountAddress, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferCcRAW6622, ((*[32]byte)(v))[:])
}

func (x codecSelfer6622) decproto_AccountAddress(v *pkg1_proto.AccountAddress, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer6622) encSliceproto_AccountAddress(v []pkg1_proto.AccountAddress, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		if false {
		} else if yyxt3 := z.Extension(z.I2Rtid(yy2)); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yy2), e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSliceproto_AccountAddress(v *[]pkg1_proto.AccountAddress, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_proto.AccountAddress{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_proto.AccountAddress, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_proto.AccountAddress, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_proto.AccountAddress{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_proto.AccountAddress{}
				} else {
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(&yyv1[yyj1]), d)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_proto.AccountAddress, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) encSlicePtrtoSQLChainUser(v []*SQLChainUser, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSlicePtrtoSQLChainUser(v *[]*SQLChainUser, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*SQLChainUser{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*SQLChainUser, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*SQLChainUser, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(SQLChainUser)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*SQLChainUser, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) encSlicePtrtoproto_AccountAddress(v []*pkg1_proto.AccountAddress, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				h.encproto_AccountAddress((*pkg1_proto.AccountAddress)(yyv1), e)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSlicePtrtoproto_AccountAddress(v *[]*pkg1_proto.AccountAddress, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*pkg1_proto.AccountAddress{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*pkg1_proto.AccountAddress, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*pkg1_proto.AccountAddress, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(pkg1_proto.AccountAddress)
					}
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						h.decproto_AccountAddress((*pkg1_proto.AccountAddress)(yyv1[yyj1]), d)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*pkg1_proto.AccountAddress, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) enchash_Hash(v *pkg3_hash.Hash, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferCcRAW6622, ((*[32]byte)(v))[:])
}

func (x codecSelfer6622) dechash_Hash(v *pkg3_hash.Hash, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:], true)
}

func (x codecSelfer6622) encSlicePtrtoproto_AddrAndGas(v []*pkg1_proto.AddrAndGas, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSlicePtrtoproto_AddrAndGas(v *[]*pkg1_proto.AddrAndGas, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*pkg1_proto.AddrAndGas{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*pkg1_proto.AddrAndGas, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*pkg1_proto.AddrAndGas, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(pkg1_proto.AddrAndGas)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*pkg1_proto.AddrAndGas, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) encSlicePtrtoasymmetric_PublicKey(v []*pkg4_asymmetric.PublicKey, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(yyv1)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSlicePtrtoasymmetric_PublicKey(v *[]*pkg4_asymmetric.PublicKey, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*pkg4_asymmetric.PublicKey{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*pkg4_asymmetric.PublicKey, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*pkg4_asymmetric.PublicKey, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(pkg4_asymmetric.PublicKey)
					}
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else if z.DecBinary() {
						z.DecBinaryUnmarshal(yyv1[yyj1])
					} else {
						z.DecFallback(yyv1[yyj1], false)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*pkg4_asymmetric.PublicKey, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) encSlicePtrtoasymmetric_Signature(v []*pkg4_asymmetric.Signature, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(yyv1)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSlicePtrtoasymmetric_Signature(v *[]*pkg4_asymmetric.Signature, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*pkg4_asymmetric.Signature{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*pkg4_asymmetric.Signature, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*pkg4_asymmetric.Signature, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(pkg4_asymmetric.Signature)
					}
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else if z.DecBinary() {
						z.DecBinaryUnmarshal(yyv1[yyj1])
					} else {
						z.DecFallback(yyv1[yyj1], false)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*pkg4_asymmetric.Signature, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6622) encSliceinterfaces_Transaction(v []pkg2_interfaces.Transaction, e *codec1978.Encoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
				z.EncExtension(yyv1, yyxt2)
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6622) decSliceinterfaces_Transaction(v *[]pkg2_interfaces.Transaction, d *codec1978.Decoder) {
	var h codecSelfer6622
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg2_interfaces.Transaction{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg2_interfaces.Transaction, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg2_interfaces.Transaction, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						z.DecFallback(&yyv1[yyj1], true)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg2_interfaces.Transaction, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
