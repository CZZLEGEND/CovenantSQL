package kayak

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *Log) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 5
	o = append(o, 0x85, 0x85)
	if z.LastHash == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.LastHash.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x85)
	o = hsp.AppendBytes(o, z.Data)
	o = append(o, 0x85)
	if oTemp, err := z.Hash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x85)
	o = hsp.AppendUint64(o, z.Index)
	o = append(o, 0x85)
	o = hsp.AppendUint64(o, z.Term)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Log) Msgsize() (s int) {
	s = 1 + 9
	if z.LastHash == nil {
		s += hsp.NilSize
	} else {
		s += z.LastHash.Msgsize()
	}
	s += 5 + hsp.BytesPrefixSize + len(z.Data) + 5 + z.Hash.Msgsize() + 6 + hsp.Uint64Size + 5 + hsp.Uint64Size
	return
}

// MarshalHash marshals for hash
func (z *Peers) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 5
	o = append(o, 0x85, 0x85)
	if z.Leader == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.Leader.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x85)
	if z.PubKey == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.PubKey.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x85)
	if z.Signature == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.Signature.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x85)
	o = hsp.AppendArrayHeader(o, uint32(len(z.Servers)))
	for za0001 := range z.Servers {
		if z.Servers[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.Servers[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = append(o, 0x85)
	o = hsp.AppendUint64(o, z.Term)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Peers) Msgsize() (s int) {
	s = 1 + 7
	if z.Leader == nil {
		s += hsp.NilSize
	} else {
		s += z.Leader.Msgsize()
	}
	s += 7
	if z.PubKey == nil {
		s += hsp.NilSize
	} else {
		s += z.PubKey.Msgsize()
	}
	s += 10
	if z.Signature == nil {
		s += hsp.NilSize
	} else {
		s += z.Signature.Msgsize()
	}
	s += 8 + hsp.ArrayHeaderSize
	for za0001 := range z.Servers {
		if z.Servers[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.Servers[za0001].Msgsize()
		}
	}
	s += 5 + hsp.Uint64Size
	return
}

// MarshalHash marshals for hash
func (z *Server) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83, 0x83)
	if z.PubKey == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.PubKey.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x83)
	if oTemp, err := z.ID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x83)
	if oTemp, err := z.Role.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Server) Msgsize() (s int) {
	s = 1 + 7
	if z.PubKey == nil {
		s += hsp.NilSize
	} else {
		s += z.PubKey.Msgsize()
	}
	s += 3 + z.ID.Msgsize() + 5 + z.Role.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z ServerState) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	o = hsp.AppendInt(o, int(z))
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ServerState) Msgsize() (s int) {
	s = hsp.IntSize
	return
}
